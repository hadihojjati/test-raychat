var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AllExceptionsFilter.html",[0,0.033,1,2.601]],["body/classes/AllExceptionsFilter.html",[0,0.031,1,3.397,2,1.215,3,0.235,4,0.207,5,0.207,6,3.849,7,2.769,8,3.397,9,5.212,10,0.323,11,1.316,12,3.801,13,4.535,14,5.212,15,5.633,16,0.527,17,3.262,18,1.072,19,0.024,20,0.737,21,0.419,22,0.89,23,5.633,24,0.947,25,3.262,26,0.583,27,4.535,28,3.262,29,0.606,30,3.849,31,2.008,32,0.235,33,1.588,34,1.712,35,3.262,36,3.262,37,3.262,38,3.262,39,5.633,40,3.262,41,0.947,42,3.262,43,3.262,44,3.262,45,2.769,46,2.444,47,3.262,48,2.202,49,3.06,50,3.262,51,5.525,52,3.262,53,3.262,54,2.769,55,3.262,56,3.262,57,3.262,58,5.212,59,3.262,60,3.262,61,4.535,62,0.015,63,0.015]],["title/controllers/AppController.html",[64,1.379,65,2.343]],["body/controllers/AppController.html",[0,0.043,3,0.324,4,0.286,5,0.286,10,0.445,11,1.628,16,0.727,19,0.024,24,1.307,26,0.721,29,0.836,32,0.324,41,1.307,62,0.019,63,0.019,64,2.227,65,3.785,66,1.788,67,3.822,68,5.426,69,2.043,70,4.503,71,0.972,72,3.457,73,3.822,74,2.548,75,1.909,76,4.503]],["title/modules/AppModule.html",[77,1.214,78,2.343]],["body/modules/AppModule.html",[0,0.027,3,0.2,4,0.177,5,0.177,19,0.024,26,0.854,29,0.517,32,0.2,46,2.086,62,0.014,63,0.014,65,3.223,66,1.609,72,3.291,73,2.363,77,1.67,78,4.542,79,1.263,80,1.263,81,1.458,82,1.458,83,1.263,84,2.501,85,1.458,86,2.363,87,2.363,88,2.363,89,3.579,90,3.579,91,3.579,92,3.045,93,2.638,94,2.121,95,1.458,96,1.355,97,2.784,98,2.293,99,2.784,100,2.086,101,1.713,102,1.879,103,1.106,104,2.086,105,2.784,106,2.784,107,2.784,108,4.775,109,1.879,110,2.939,111,2.363,112,2.363,113,2.939,114,2.363,115,3.438,116,1.713,117,1.458,118,2.363,119,2.363,120,2.363,121,1.037,122,2.784,123,2.784,124,2.363,125,2.086,126,2.363,127,2.363,128,2.363,129,4.051,130,4.051,131,3.438,132,3.438]],["title/injectables/AppService.html",[72,1.965,133,0.836]],["body/injectables/AppService.html",[0,0.045,3,0.339,4,0.3,5,0.3,10,0.466,11,1.675,16,0.761,19,0.024,24,1.369,26,0.606,29,0.875,32,0.339,41,1.369,62,0.02,63,0.02,68,5.514,71,1,72,3.266,133,1.39,134,2.139,135,4.002,136,4.714,137,4.714,138,4.714]],["title/controllers/AuthController.html",[64,1.379,139,2.343]],["body/controllers/AuthController.html",[0,0.023,3,0.173,4,0.152,5,0.152,10,0.237,11,1.052,16,0.585,18,1.191,19,0.024,20,0.819,21,0.466,22,0.989,24,1.052,26,0.708,29,0.445,30,4.997,31,1.475,32,0.173,33,1.764,34,1.436,41,1.519,51,4.136,62,0.012,63,0.012,64,0.952,66,0.952,69,1.644,74,1.356,121,1.35,139,2.446,140,2.034,141,1.617,142,2.396,143,1.925,144,3.076,145,3.076,146,2.034,147,3.388,148,5.887,149,2.396,150,2.396,151,2.396,152,2.95,153,2.396,154,2.396,155,4.371,156,1.617,157,1.617,158,2.396,159,2.552,160,1.795,161,2.034,162,2.446,163,2.034,164,2.396,165,2.396,166,2.396,167,2.396,168,3.624,169,2.396,170,3.623,171,1.764,172,2.396,173,2.034,174,2.396,175,3.288,176,3.624,177,3.624,178,3.624,179,2.034,180,2.034,181,2.716,182,3.624,183,3.624,184,4.136,185,2.95,186,3.624,187,3.624,188,4.371,189,2.396,190,2.396,191,3.624,192,2.396,193,2.396,194,2.396,195,3.624,196,2.396,197,2.396,198,2.396,199,3.624,200,2.396,201,2.396,202,2.396,203,1.736,204,2.396,205,2.396,206,1.795,207,2.396,208,2.396,209,1.795,210,2.396,211,2.396,212,2.396,213,2.396,214,0.952,215,2.396,216,2.396,217,2.396,218,2.396,219,2.396]],["title/guards/AuthGuard.html",[220,2.601,221,2.343]],["body/guards/AuthGuard.html",[0,0.03,3,0.224,4,0.198,5,0.198,8,2.334,10,0.308,11,1.274,12,2.102,16,0.709,18,1.442,19,0.024,20,0.992,21,0.564,22,1.198,24,0.904,26,0.653,29,0.578,32,0.224,34,1.912,41,0.904,62,0.015,63,0.015,75,1.862,93,2.739,117,1.631,121,1.16,133,1.057,143,1.778,170,3.397,171,1.516,214,2.019,221,2.963,222,2.334,223,2.644,224,4.136,225,1.992,226,3.115,227,4.648,228,3.115,229,3.289,230,4.136,231,3.115,232,2.334,233,2.299,234,2.102,235,3.115,236,1.917,237,2.136,238,2.963,239,2.644,240,4.39,241,3.115,242,3.115,243,2.662,244,3.726,245,2.644,246,3.115,247,3.115,248,2.334,249,2.334,250,3.115,251,4.39,252,3.115,253,2.334,254,2.334,255,2.644,256,2.334,257,3.129,258,3.115,259,2.644,260,3.115,261,3.115,262,3.115]],["title/modules/AuthModule.html",[77,1.214,89,2.136]],["body/modules/AuthModule.html",[0,0.029,3,0.217,4,0.192,5,0.192,19,0.024,22,0.824,26,0.822,29,0.561,32,0.217,62,0.015,63,0.015,66,1.706,77,1.748,79,1.371,80,1.371,81,1.582,82,1.582,83,1.371,84,2.618,85,2.618,89,4.113,92,3.13,94,2.25,95,1.582,96,1.47,98,2.83,100,4.079,101,1.859,104,2.263,125,2.263,139,3.374,143,1.056,159,3.47,160,2.263,185,2.039,236,1.859,263,2.564,264,2.564,265,2.564,266,2.564,267,3.679,268,3.679,269,3.021,270,3.021,271,4.296,272,2.039,273,4.622,274,3.021,275,3.021,276,3.021,277,3.021,278,3.021,279,4.296,280,2.263,281,2.564,282,3.021,283,3.021,284,2.564,285,3.021,286,3.021,287,3.021,288,3.021,289,3.021,290,3.021,291,2.263,292,2.564]],["title/injectables/AuthService.html",[133,0.836,159,1.818]],["body/injectables/AuthService.html",[0,0.016,3,0.119,4,0.105,5,0.105,10,0.164,11,0.787,12,1.118,16,0.707,18,1.439,19,0.024,20,0.99,21,0.563,22,1.195,24,1.153,26,0.638,29,0.308,32,0.119,34,2.027,41,1.272,45,3.372,48,2.321,49,1.118,62,0.009,63,0.009,71,1.069,75,1.458,93,2.251,117,2.886,118,1.407,133,0.653,134,0.752,143,2.014,144,3.372,145,3.372,146,2.301,147,2.894,159,1.419,161,1.407,170,4.015,171,2.288,175,1.118,185,1.829,203,2.288,214,1.366,225,1.23,227,3.718,233,2.711,234,1.829,236,1.02,237,1.673,243,1.801,248,2.031,253,1.242,254,2.976,256,1.242,257,1.02,291,1.242,293,1.407,294,2.71,295,3.439,296,1.657,297,2.288,298,1.657,299,1.657,300,2.919,301,2.71,302,1.657,303,3.972,304,2.71,305,1.657,306,2.116,307,2.301,308,2.576,309,2.71,310,2.931,311,1.657,312,3.439,313,1.987,314,1.407,315,1.407,316,1.242,317,2.71,318,1.657,319,1.657,320,1.657,321,2.301,322,1.407,323,1.407,324,1.657,325,1.657,326,1.657,327,1.657,328,1.657,329,0.752,330,2.71,331,1.657,332,1.657,333,2.71,334,1.657,335,2.71,336,3.718,337,1.657,338,1.657,339,1.407,340,1.657,341,1.829,342,1.657,343,1.657,344,2.71,345,2.71,346,1.657,347,1.657,348,2.71,349,1.657,350,1.657,351,1.657,352,2.71,353,1.657,354,1.407,355,1.657,356,1.657,357,1.657,358,1.657,359,1.657,360,2.71,361,1.657,362,2.71,363,2.71,364,1.657,365,1.407,366,1.407,367,1.407,368,1.657,369,1.657,370,1.657,371,1.657,372,1.657,373,1.407]],["title/classes/CreateGroupDto.html",[0,0.033,374,2.136]],["body/classes/CreateGroupDto.html",[0,0.045,2,1.756,3,0.339,4,0.3,5,0.3,10,0.466,16,0.932,19,0.023,20,1.409,21,0.742,32,0.339,62,0.02,63,0.02,71,1.126,374,3.551,375,5.292,376,3.532,377,1.782,378,3.034,379,4.002,380,4.002]],["title/classes/CreateHipDto.html",[0,0.033,381,1.965]],["body/classes/CreateHipDto.html",[0,0.051,2,1.522,3,0.294,4,0.26,5,0.26,10,0.404,16,0.943,19,0.024,21,0.75,26,0.525,32,0.294,62,0.018,63,0.018,69,2.649,71,1.133,377,1.628,381,2.984,382,5.236,383,3.002,384,3.061,385,4.956,386,4.956,387,2.649,388,5.838,389,4.085,390,4.085,391,4.085,392,6.169,393,6.169,394,3.467]],["title/classes/CreateUserDto.html",[0,0.033,395,2.136]],["body/classes/CreateUserDto.html",[0,0.043,2,1.684,3,0.325,4,0.287,5,0.287,10,0.447,16,0.988,19,0.023,21,0.787,32,0.325,62,0.019,63,0.019,71,1.163,310,3.464,313,2.776,377,1.736,395,3.46,396,5.434,397,3.387,398,4.13,399,3.837,400,3.837,401,3.837]],["title/interfaces/CustomRequest.html",[152,2.343,402,2.136]],["body/interfaces/CustomRequest.html",[3,0.322,4,0.284,5,0.284,10,0.442,19,0.024,21,0.782,26,0.574,31,2.749,32,0.322,33,2.173,62,0.019,63,0.019,71,0.967,152,3.765,203,2.532,238,4.107,255,3.791,257,2.749,306,2.749,308,3.346,313,2.026,341,3.014,377,1.723,402,2.749,403,3.346,404,3.791,405,3.791,406,3.434,407,5.58,408,4.466,409,4.466]],["title/classes/Group.html",[0,0.033,410,1.965]],["body/classes/Group.html",[0,0.038,2,1.462,3,0.283,4,0.249,5,0.249,10,0.388,16,0.829,19,0.024,20,1.295,21,0.781,26,0.66,32,0.412,34,1.289,62,0.017,63,0.017,69,2.331,71,1.093,103,1.559,121,2.263,329,1.781,377,1.586,378,2.956,410,3.241,411,2.649,412,3.332,413,3.925,414,3.332,415,3.332,416,4.291,417,3.925,418,4.291,419,2.908,420,2.941,421,3.849,422,2.941,423,3.332,424,3.925,425,3.925,426,2.649,427,3.332]],["title/injectables/GroupService.html",[133,0.836,428,1.818]],["body/injectables/GroupService.html",[0,0.029,3,0.216,4,0.19,5,0.19,10,0.296,11,1.24,16,0.876,18,1.782,19,0.024,20,1.226,21,0.697,22,1.48,24,1.445,26,0.766,29,0.556,32,0.216,34,0.984,41,1.445,62,0.014,63,0.014,71,0.862,103,1.19,121,1.116,133,1.029,134,1.359,143,2.232,214,1.696,225,1.359,233,3.122,237,1.458,329,1.359,374,3.529,387,1.359,398,2.882,428,2.236,429,2.543,430,2.628,431,4.271,432,2.882,433,2.996,434,4.064,435,2.996,436,4.271,437,3.625,438,2.996,439,4.271,440,4.224,441,2.996,442,2.882,443,3.86,444,2.996,445,2.245,446,2.022,447,2.996,448,2.543,449,2.022,450,3.625,451,2.022,452,2.996,453,2.996,454,2.996,455,2.996,456,2.996,457,2.543,458,2.245,459,2.543,460,2.996,461,2.022,462,3.2,463,2.996]],["title/controllers/GroupsController.html",[64,1.379,464,2.343]],["body/controllers/GroupsController.html",[0,0.032,3,0.238,4,0.21,5,0.21,10,0.328,11,1.33,16,0.74,18,1.505,19,0.024,20,1.036,21,0.589,22,1.25,24,1.33,26,0.811,29,0.85,32,0.238,33,2.23,41,1.33,62,0.015,63,0.015,64,1.315,66,1.315,69,2.079,71,0.91,74,1.874,75,1.404,110,2.038,111,2.811,112,2.811,113,2.82,114,2.811,141,2.235,143,2.153,156,3.545,157,3.092,374,3.789,387,2.079,428,2.751,430,2.82,432,3.092,437,2.811,442,2.235,443,3.959,449,2.235,450,3.889,451,2.235,458,2.481,464,3.092,465,2.811,466,3.311,467,4.582,468,3.311,469,2.811,470,2.481,471,2.481,472,2.811,473,3.311,474,3.311,475,3.311,476,2.811,477,3.311,478,2.811,479,3.311]],["title/modules/GroupsModule.html",[77,1.214,90,2.136]],["body/modules/GroupsModule.html",[0,0.035,3,0.265,4,0.234,5,0.234,19,0.024,20,0.831,26,0.816,29,0.682,32,0.265,62,0.017,63,0.017,66,1.954,77,1.939,79,1.668,80,1.668,81,1.925,82,1.925,83,1.668,84,2.903,85,2.903,90,4.108,92,3.326,94,2.576,95,1.925,96,1.789,98,2.784,102,2.481,103,1.46,104,2.754,410,2.081,419,2.081,426,3.32,428,3.587,448,3.12,464,3.742,472,3.12,480,3.12,481,3.676,482,3.12,483,3.12,484,3.676,485,3.676,486,2.754,487,3.676]],["title/classes/Hip.html",[0,0.033,383,1.689]],["body/classes/Hip.html",[0,0.038,2,1.483,3,0.287,4,0.253,5,0.253,10,0.394,16,0.931,19,0.024,21,0.785,26,0.667,32,0.415,34,1.308,62,0.018,63,0.018,69,2.616,71,1.126,103,1.581,329,1.806,377,1.601,383,2.806,385,4.895,386,4.895,387,2.616,418,4.955,419,2.935,420,2.983,421,3.885,488,2.687,489,3.982,490,3.982,491,3.982,492,2.687,493,2.687,494,3.38]],["title/controllers/HipsController.html",[64,1.379,495,2.343]],["body/controllers/HipsController.html",[0,0.026,3,0.195,4,0.172,5,0.172,10,0.267,11,1.151,16,0.889,18,1.699,19,0.024,20,1.169,21,0.665,22,1.411,24,1.598,26,0.708,29,0.502,32,0.195,33,2.679,41,1.598,62,0.013,63,0.013,64,1.073,66,1.073,69,2.498,71,1.078,74,1.529,75,1.146,141,1.824,143,2.328,156,2.675,157,2.675,378,1.315,381,3.257,383,1.929,387,2.611,469,2.294,470,2.025,471,2.025,495,2.675,496,2.294,497,2.702,498,3.963,499,3.364,500,3.364,501,4.389,502,3.984,503,2.702,504,2.702,505,2.702,506,2.294,507,2.702,508,2.702,509,2.294,510,2.702,511,2.702,512,2.702,513,2.702,514,2.294,515,3.753,516,2.702,517,2.702,518,2.294,519,2.97,520,2.294,521,2.657,522,2.294,523,2.294,524,2.702,525,2.702,526,2.702,527,2.702,528,2.702,529,2.702,530,2.702,531,2.702,532,2.702,533,2.702,534,2.702,535,2.702,536,2.702,537,2.702,538,2.702,539,2.702,540,2.702,541,2.702]],["title/modules/HipsModule.html",[77,1.214,91,2.136]],["body/modules/HipsModule.html",[0,0.036,3,0.272,4,0.24,5,0.24,19,0.024,20,0.854,26,0.839,29,0.701,32,0.272,62,0.017,63,0.017,66,1.989,77,2.178,79,1.714,80,1.714,81,1.978,82,1.978,83,1.714,84,2.943,85,1.978,91,3.939,94,2.623,95,1.978,96,1.838,98,2.138,102,2.549,103,1.5,185,2.549,248,2.83,329,2.272,383,2.735,419,3.181,486,2.83,493,3.38,495,3.792,521,3.623,522,3.206,542,3.206,543,3.206,544,3.777,545,3.777,546,3.777,547,3.206,548,3.777,549,3.206]],["title/injectables/HipsService.html",[133,0.836,521,1.965]],["body/injectables/HipsService.html",[0,0.023,3,0.171,4,0.151,5,0.151,10,0.234,11,1.044,16,0.92,18,1.801,19,0.024,20,1.239,21,0.705,22,1.496,24,1.591,26,0.705,29,0.44,32,0.171,33,2.535,34,1.801,41,1.512,62,0.012,63,0.012,71,1.094,75,1.005,103,0.942,121,0.883,133,0.866,134,1.076,143,2.324,171,2.668,209,1.776,214,1.725,225,1.631,233,1.882,237,1.154,243,1.241,257,3.206,321,2.012,329,1.076,381,2.743,383,2.535,387,1.97,434,3.631,445,1.776,459,3.051,461,1.6,462,1.776,492,1.6,499,3.051,500,3.051,501,4.113,502,3.051,506,3.051,509,3.051,514,3.051,515,2.983,518,2.012,519,2.693,520,2.012,521,2.035,550,2.012,551,3.595,552,3.595,553,2.371,554,2.371,555,3.595,556,2.371,557,3.595,558,2.371,559,2.371,560,2.371,561,3.595,562,2.371,563,2.371,564,2.371,565,2.371,566,2.371,567,2.371,568,2.371,569,2.371,570,2.371,571,3.595,572,2.371,573,2.371,574,4.342,575,2.371,576,2.371,577,3.595,578,2.371,579,2.371]],["title/injectables/JwtAuthGuard.html",[110,2.136,133,0.836]],["body/injectables/JwtAuthGuard.html",[0,0.03,3,0.396,4,0.196,5,0.196,10,0.306,11,1.267,16,0.817,18,1.663,19,0.024,20,1.144,21,0.561,22,1.381,24,1.267,26,0.707,29,0.573,32,0.222,34,1.015,41,1.596,49,2.084,62,0.015,63,0.015,74,1.748,109,2.084,110,2.686,121,1.15,131,2.622,133,1.051,134,1.401,162,2.945,163,2.622,170,1.901,181,2.314,203,2.458,206,2.314,214,1.227,221,2.084,224,3.27,225,1.401,229,3.27,230,4.12,232,2.314,234,2.945,243,2.285,245,2.622,253,2.314,272,2.084,306,2.686,406,2.686,580,4.12,581,2.622,582,4.364,583,4.364,584,2.622,585,5.111,586,3.089,587,3.089,588,4.364,589,3.089,590,5.06,591,2.314,592,2.622,593,3.704,594,3.089,595,2.622,596,3.089,597,4.364,598,3.089,599,2.622,600,2.622,601,3.089,602,2.314,603,2.622,604,3.089,605,3.089]],["title/interfaces/JwtPayload.html",[402,2.136,606,2.343]],["body/interfaces/JwtPayload.html",[3,0.334,4,0.294,5,0.294,10,0.458,19,0.023,21,0.734,32,0.334,46,3.473,62,0.019,63,0.019,71,1.17,203,1.841,313,2.93,341,4.358,377,1.763,387,2.103,402,2.853,403,3.473,461,3.128,580,3.473,606,3.853,607,3.934,608,4.635]],["title/injectables/JwtStrategy.html",[133,0.836,268,2.136]],["body/injectables/JwtStrategy.html",[0,0.024,3,0.182,4,0.16,5,0.16,10,0.25,11,1.094,16,0.728,18,1.238,19,0.024,20,0.852,21,0.484,22,1.028,24,0.732,26,0.786,29,0.468,31,1.553,32,0.182,33,1.228,34,1.844,41,1.309,48,1.702,62,0.013,63,0.013,71,0.437,75,2.12,93,2.773,101,1.553,116,1.553,117,2.361,133,0.907,134,1.145,143,1.576,159,3.046,160,1.89,170,3.293,171,1.228,175,1.702,179,2.141,214,1.002,225,1.709,227,4.479,234,1.702,236,1.553,237,2.83,238,2.542,243,1.321,244,2.141,249,1.89,254,2.822,257,2.318,268,2.318,272,1.702,273,4.764,281,3.197,284,2.141,306,2.775,308,2.822,313,1.145,322,2.141,336,2.141,341,1.702,354,3.197,366,2.141,367,2.141,377,1.163,406,2.318,592,2.141,603,2.141,606,1.702,609,2.141,610,3.767,611,4.508,612,2.523,613,3.767,614,3.767,615,2.523,616,2.523,617,2.523,618,2.523,619,2.141,620,2.523,621,3.767,622,2.523,623,2.523,624,2.523,625,2.523,626,2.523,627,2.141,628,2.523,629,2.523,630,2.523,631,2.523,632,2.523,633,2.523,634,2.523,635,2.523,636,2.523,637,2.523,638,2.523,639,2.523,640,2.523,641,2.523]],["title/classes/LoginDto.html",[0,0.033,147,2.136]],["body/classes/LoginDto.html",[0,0.046,2,1.779,3,0.344,4,0.303,5,0.303,10,0.472,16,0.939,19,0.023,21,0.747,32,0.344,62,0.02,63,0.02,71,1.131,147,3.579,310,3.549,313,2.845,377,1.796,642,4.054,643,4.776,644,4.776]],["title/guards/PermissionsGuard.html",[113,2.136,220,2.601]],["body/guards/PermissionsGuard.html",[0,0.025,3,0.186,4,0.164,5,0.164,8,1.939,10,0.256,11,1.114,16,0.739,18,1.504,19,0.024,20,1.035,21,0.588,22,1.249,24,1.114,26,0.754,29,0.48,32,0.186,34,1.927,41,1.47,62,0.013,63,0.013,71,0.793,75,1.628,109,1.746,113,2.363,121,1.705,133,0.925,143,1.6,171,1.868,181,1.939,203,2.148,206,1.939,209,1.939,214,1.818,222,1.939,224,3.794,225,1.742,229,2.876,230,3.794,232,1.939,233,2.01,237,2.227,238,1.746,239,2.197,243,2.397,259,2.197,297,2.931,314,2.197,323,2.197,365,2.197,378,1.868,410,1.465,416,3.429,428,2.651,458,3.429,584,2.197,585,4.809,595,2.197,599,2.197,627,2.197,645,2.197,646,3.839,647,5.063,648,2.588,649,2.588,650,3.839,651,5.665,652,2.588,653,3.839,654,2.588,655,2.588,656,2.588,657,2.197,658,2.588,659,3.839,660,2.588,661,3.839,662,2.588,663,2.588,664,2.588,665,2.588,666,2.588,667,4.577,668,2.588,669,3.839,670,2.588,671,2.588]],["title/modules/RedisCustomModule.html",[77,1.214,267,2.136]],["body/modules/RedisCustomModule.html",[0,0.037,3,0.277,4,0.244,5,0.244,19,0.024,26,0.775,29,0.713,32,0.277,62,0.017,63,0.017,77,1.982,79,1.743,80,1.743,81,2.012,82,2.012,83,1.743,84,2.968,85,2.968,93,3.129,94,2.653,95,2.012,96,1.87,98,2.175,100,2.879,101,2.365,115,3.262,116,2.365,117,2.012,119,3.262,120,3.262,121,1.431,124,3.262,125,2.879,126,3.262,127,3.262,128,3.262,132,3.262,267,4.036,672,3.262,673,3.843,674,3.262,675,3.843,676,3.843,677,3.843,678,3.843]],["title/injectables/RedisService.html",[93,1.575,133,0.836]],["body/injectables/RedisService.html",[0,0.018,3,0.132,4,0.116,5,0.116,10,0.181,11,0.852,12,3.109,16,0.835,18,1.616,19,0.024,20,1.112,21,0.632,22,1.466,24,1.337,26,0.472,29,0.339,32,0.132,34,1.208,41,0.852,48,4.349,49,3.839,62,0.01,63,0.014,71,1.101,75,1.784,93,1.331,116,1.125,117,3.416,133,0.707,134,0.829,143,2.158,171,2.515,173,4.561,214,1.165,225,0.829,233,2.979,237,2.047,243,2.413,256,3.452,291,2.198,373,3.911,377,0.906,457,3.571,471,3.685,600,1.551,602,1.369,679,1.551,680,4.207,681,2.934,682,2.934,683,2.934,684,1.828,685,2.934,686,2.934,687,1.828,688,2.934,689,1.828,690,5.544,691,4.919,692,2.934,693,1.828,694,5.025,695,2.934,696,1.828,697,4.207,698,2.934,699,5.169,700,3.676,701,1.828,702,2.934,703,1.828,704,2.934,705,1.551,706,1.828,707,1.828,708,2.934,709,1.828,710,3.676,711,4.607,712,1.828,713,2.934,714,1.828,715,2.934,716,1.828,717,2.934,718,1.828,719,1.828,720,1.828,721,1.551,722,1.828]],["title/classes/UpdateGroupDto.html",[0,0.033,443,2.136]],["body/classes/UpdateGroupDto.html",[0,0.044,2,1.726,3,0.334,4,0.294,5,0.294,10,0.458,16,0.922,19,0.023,20,1.399,21,0.734,22,1.762,32,0.334,62,0.019,63,0.019,71,1.119,376,3.473,377,1.763,378,3.011,379,3.934,380,3.934,443,3.514,723,5.252]],["title/classes/UpdateHipDto.html",[0,0.033,515,2.136]],["body/classes/UpdateHipDto.html",[0,0.046,2,1.802,3,0.348,4,0.307,5,0.307,19,0.023,26,0.753,32,0.348,62,0.02,63,0.02,381,2.739,383,2.852,384,3.625,406,3.608,430,2.978,446,3.265,515,3.608,519,3.625,724,4.107,725,5.862,726,4.839,727,4.107]],["title/classes/UpdateUserDto.html",[0,0.033,728,2.136]],["body/classes/UpdateUserDto.html",[0,0.042,2,1.643,3,0.318,4,0.28,5,0.28,10,0.436,16,0.977,19,0.023,21,0.778,22,1.821,32,0.318,62,0.019,63,0.019,71,1.156,310,3.426,313,2.746,377,1.71,397,3.306,398,4.084,399,3.745,400,3.745,401,3.745,728,3.408,729,5.387]],["title/classes/User.html",[0,0.033,203,1.379]],["body/classes/User.html",[0,0.044,2,1.226,3,0.237,4,0.209,5,0.209,10,0.326,16,0.913,19,0.024,21,0.826,26,0.673,32,0.407,34,1.081,62,0.015,63,0.015,69,2.376,71,0.98,103,1.307,121,2.106,203,2.246,310,2.964,313,2.376,329,1.493,377,1.409,398,3.534,406,2.026,410,3.201,412,3.873,414,2.794,415,2.794,416,3.419,418,4.449,419,2.964,420,2.466,421,3.924,423,2.794,440,5.041,446,2.221,461,3.816,730,2.221,731,3.292,732,3.292,733,3.292,734,3.292,735,3.292,736,3.292,737,2.221,738,3.292,739,4.563,740,3.292,741,3.292,742,3.292,743,3.292,744,3.292,745,2.794,746,2.794,747,2.221,748,2.794]],["title/injectables/UserService.html",[133,0.836,297,1.689]],["body/injectables/UserService.html",[0,0.026,3,0.194,4,0.171,5,0.171,10,0.267,11,1.149,16,0.888,18,1.807,19,0.024,20,1.243,21,0.707,22,1.501,24,1.499,26,0.764,29,0.5,32,0.194,34,1.3,41,1.597,62,0.013,63,0.013,71,1.078,103,1.071,121,1.004,133,0.953,134,1.223,143,2.267,171,1.312,203,1.071,214,1.571,225,1.795,233,3.191,237,1.312,297,1.925,310,1.526,313,1.795,315,2.288,316,2.02,329,1.223,387,1.795,395,3.538,430,2.435,432,2.67,434,3.869,442,2.67,445,2.02,449,1.819,451,1.819,462,3.512,728,3.751,737,1.819,749,2.288,750,3.956,751,3.956,752,2.696,753,2.696,754,3.956,755,3.358,756,2.696,757,3.956,758,2.696,759,3.956,760,2.696,761,2.696,762,2.288,763,3.358,764,2.696,765,3.956,766,2.696,767,2.696,768,2.696,769,2.696,770,2.696,771,2.696,772,2.696,773,2.696,774,2.696,775,2.696,776,2.696,777,2.696,778,2.696]],["title/controllers/UsersController.html",[64,1.379,779,2.343]],["body/controllers/UsersController.html",[0,0.033,3,0.247,4,0.218,5,0.218,10,0.339,11,1.361,16,0.757,18,1.541,19,0.024,20,1.06,21,0.603,22,1.28,24,1.361,26,0.774,29,0.636,32,0.247,33,2.282,41,1.361,62,0.016,63,0.016,64,1.36,66,1.36,69,2.127,71,0.927,74,1.938,75,1.452,141,2.311,143,2.175,156,3.164,157,3.164,297,2.602,378,1.666,387,2.127,395,3.828,430,2.886,432,3.164,442,2.311,449,2.311,451,2.311,470,2.566,476,2.907,478,2.907,523,2.907,728,3.991,755,2.907,763,3.98,779,3.164,780,2.907,781,3.425,782,3.425,783,3.425,784,3.425,785,3.425,786,3.425,787,2.907,788,3.425,789,3.425,790,3.425,791,3.425,792,3.425,793,3.425]],["title/modules/UsersModule.html",[77,1.214,92,1.818]],["body/modules/UsersModule.html",[0,0.037,3,0.28,4,0.247,5,0.247,19,0.024,20,0.878,26,0.808,29,0.721,32,0.28,62,0.017,63,0.017,66,2.026,77,1.992,79,1.762,80,1.762,81,2.034,82,2.034,83,1.762,84,2.983,85,2.983,92,3.443,94,2.671,95,2.034,96,1.89,98,2.198,102,2.621,103,1.542,203,1.542,297,3.361,419,2.198,486,2.91,747,3.443,762,3.296,779,3.845,787,3.296,794,3.296,795,3.296,796,3.296,797,3.883,798,3.883,799,3.883]],["title/coverage.html",[800,3.546]],["body/coverage.html",[0,0.06,1,1.807,5,0.153,6,2.048,7,2.048,19,0.024,21,0.628,62,0.012,63,0.012,64,2.084,65,1.628,67,2.048,72,1.365,83,1.094,93,1.094,110,1.485,113,1.485,133,1.421,135,2.048,139,1.628,140,2.048,147,1.485,152,1.628,159,1.263,162,1.628,203,0.958,214,0.958,220,2.729,221,1.628,223,2.048,268,1.485,293,2.048,297,1.174,339,2.048,374,1.485,375,2.048,376,2.729,378,1.174,381,1.365,382,2.048,383,2.135,384,2.729,395,1.485,396,2.048,397,2.729,402,2.242,404,2.048,405,2.048,410,1.365,411,2.961,422,1.807,426,1.628,428,1.263,429,2.048,443,1.485,464,1.628,465,2.048,488,2.961,492,1.628,493,1.628,495,1.628,496,2.048,515,1.485,521,1.365,550,2.048,580,2.729,581,2.048,591,1.807,606,1.628,607,2.048,609,2.048,642,2.048,645,2.048,679,2.048,721,5.973,723,2.048,724,2.048,728,1.485,729,2.048,730,2.961,737,1.628,747,1.628,749,2.048,779,1.628,780,2.048,800,1.807,801,2.048,802,2.412,803,4.889,804,6.037,805,2.412,806,2.412,807,5.73,808,3.092,809,5.73,810,6.334,811,2.048,812,3.092,813,2.412,814,2.412,815,3.642,816,4.388,817,3.642,818,2.412,819,2.048,820,2.412,821,2.412,822,2.412]],["title/dependencies.html",[80,1.894,823,2.463]],["body/dependencies.html",[0,0.034,19,0.024,29,0.667,31,2.211,62,0.016,63,0.016,80,1.63,101,2.211,103,1.427,109,2.424,116,2.211,117,2.87,175,2.424,236,2.211,272,2.424,300,3.049,306,2.211,316,2.691,329,1.63,394,3.049,446,3.269,619,4.651,657,3.049,705,3.049,727,3.049,824,3.592,825,3.592,826,5.48,827,4.111,828,3.592,829,3.592,830,3.592,831,3.592,832,3.592,833,3.592,834,3.592,835,3.592,836,3.592,837,3.592,838,3.592,839,3.592,840,3.592,841,3.592,842,3.592,843,4.844,844,4.844,845,3.592,846,3.592,847,3.592,848,3.592,849,3.592,850,3.592,851,3.592,852,3.592,853,3.592,854,3.049,855,3.592,856,3.592,857,3.592,858,3.592,859,3.592,860,3.592,861,3.592,862,3.592,863,3.592,864,3.592,865,3.592,866,3.592,867,3.592,868,3.592,869,3.592]],["title/miscellaneous/functions.html",[870,1.642,871,3.543]],["body/miscellaneous/functions.html",[10,0.527,19,0.021,62,0.021,63,0.021,83,2.98,819,4.525,870,3.017,871,4.525,872,5.33]],["title/index.html",[10,0.287,873,2.901,874,2.901]],["body/index.html",[4,0.191,19,0.023,54,2.557,62,0.015,63,0.015,96,2.646,180,2.557,184,2.557,249,4.074,292,4.237,307,2.557,549,2.557,745,2.557,746,2.557,800,2.257,801,2.557,827,4.616,875,3.013,876,3.013,877,4.992,878,3.013,879,3.013,880,3.013,881,3.013,882,2.557,883,4.992,884,3.013,885,3.013,886,5.438,887,4.992,888,6.145,889,3.013,890,6.145,891,3.013,892,3.013,893,3.013,894,4.287,895,3.013,896,3.013,897,4.992,898,3.013,899,4.287,900,3.013,901,3.013,902,3.013,903,3.013,904,3.013,905,3.013,906,3.013,907,3.013,908,4.287,909,3.013,910,4.992,911,3.013,912,4.616,913,4.287,914,3.013,915,3.013,916,3.013,917,3.013,918,3.013,919,3.013,920,4.992,921,3.013,922,3.013,923,3.013,924,4.287,925,3.013,926,3.013,927,3.013,928,3.013,929,3.013,930,3.013,931,3.013,932,3.013,933,3.013,934,4.287,935,3.013,936,3.013,937,3.013,938,3.013,939,3.013,940,3.013,941,4.287,942,3.013,943,3.013,944,3.013,945,4.287,946,4.287,947,3.013,948,3.013,949,3.013,950,3.013,951,3.013,952,3.013,953,3.013,954,3.013,955,3.013,956,3.013,957,2.557,958,3.013,959,3.013,960,3.013,961,3.013,962,3.013,963,3.013,964,2.557]],["title/modules.html",[79,2.147]],["body/modules.html",[19,0.02,62,0.02,63,0.02,78,3.237,79,2.176,89,2.952,90,2.952,91,2.952,92,2.512,267,2.952,912,5.78,965,6.809,966,6.809,967,6.809]],["title/overview.html",[968,4.017]],["body/overview.html",[2,1.173,19,0.024,62,0.015,63,0.015,66,1.251,72,2.895,77,1.102,78,4.572,79,1.429,80,1.429,81,1.65,82,1.65,83,1.429,84,1.65,85,1.65,86,2.674,87,2.674,88,2.674,89,4.109,90,3.91,91,3.597,92,3.327,93,2.883,94,2.317,95,1.65,96,1.533,134,1.429,159,3.259,222,2.36,263,2.674,264,2.674,265,2.674,266,2.674,267,3.73,268,3.148,297,3.029,403,2.36,428,3.259,480,2.674,482,2.674,483,2.674,521,2.895,542,2.674,543,2.674,547,3.756,672,2.674,674,2.674,794,2.674,795,2.674,796,2.674,968,2.674,969,3.15,970,3.15,971,3.15,972,3.15]],["title/properties.html",[377,1.289,823,2.463]],["body/properties.html",[19,0.023,62,0.021,63,0.021,377,1.607,854,4.418,882,4.418,957,4.418,964,4.418,973,5.205,974,5.205,975,5.205,976,5.205]],["title/miscellaneous/typealiases.html",[870,1.642,977,4.174]],["body/miscellaneous/typealiases.html",[10,0.508,19,0.021,21,0.66,62,0.021,63,0.021,411,3.463,422,4.549,488,3.463,492,4.097,730,3.463,737,4.097,870,2.905,978,5.132,979,4.356,980,4.356,981,4.356]],["title/miscellaneous/variables.html",[280,3.127,870,1.642]],["body/miscellaneous/variables.html",[10,0.406,19,0.024,21,0.679,62,0.018,63,0.018,71,1.014,121,1.527,162,3.567,280,3.072,378,3.111,411,2.767,426,3.567,427,3.48,488,2.767,493,3.567,494,3.48,591,3.96,593,3.48,602,4.99,694,5.653,730,2.767,747,3.567,748,3.48,808,3.48,811,4.486,812,3.48,870,2.321,979,3.48,980,3.48,981,3.48,982,5.285,983,5.285,984,4.1,985,4.1]]],"invertedIndex":[["",{"_index":19,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateGroupDto.html":{},"classes/CreateHipDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"classes/Group.html":{},"injectables/GroupService.html":{},"controllers/GroupsController.html":{},"modules/GroupsModule.html":{},"classes/Hip.html":{},"controllers/HipsController.html":{},"modules/HipsModule.html":{},"injectables/HipsService.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"guards/PermissionsGuard.html":{},"modules/RedisCustomModule.html":{},"injectables/RedisService.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateHipDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":721,"title":{},"body":{"injectables/RedisService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":854,"title":{},"body":{"dependencies.html":{},"properties.html":{}}}],["0.1.12",{"_index":866,"title":{},"body":{"dependencies.html":{}}}],["0.14.1",{"_index":847,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":859,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":810,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":803,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":804,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":807,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":815,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":817,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":818,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":248,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"modules/HipsModule.html":{}}}],["1.0.0",{"_index":862,"title":{},"body":{"dependencies.html":{}}}],["1.1.26",{"_index":825,"title":{},"body":{"dependencies.html":{}}}],["1.4.7",{"_index":849,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":767,"title":{},"body":{"injectables/UserService.html":{}}}],["10.0.10",{"_index":834,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":835,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":832,"title":{},"body":{"dependencies.html":{}}}],["1000",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{}}}],["11",{"_index":972,"title":{},"body":{"overview.html":{}}}],["11000",{"_index":56,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["16.4.5",{"_index":851,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":547,"title":{},"body":{"modules/HipsModule.html":{},"overview.html":{}}}],["2.0.0",{"_index":846,"title":{},"body":{"dependencies.html":{}}}],["2.0.2",{"_index":829,"title":{},"body":{"dependencies.html":{}}}],["2.0.5",{"_index":833,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":842,"title":{},"body":{"dependencies.html":{}}}],["3",{"_index":548,"title":{},"body":{"modules/HipsModule.html":{}}}],["3.1.0",{"_index":858,"title":{},"body":{"dependencies.html":{}}}],["3.2.3",{"_index":831,"title":{},"body":{"dependencies.html":{}}}],["3600",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{}}}],["4.0.0",{"_index":845,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":860,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":839,"title":{},"body":{"dependencies.html":{}}}],["4.7.0",{"_index":863,"title":{},"body":{"dependencies.html":{}}}],["4/6",{"_index":806,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":970,"title":{},"body":{"overview.html":{}}}],["5.4.1",{"_index":852,"title":{},"body":{"dependencies.html":{}}}],["5/8",{"_index":814,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":969,"title":{},"body":{"overview.html":{}}}],["6.2.1",{"_index":841,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{}}}],["60m",{"_index":290,"title":{},"body":{"modules/AuthModule.html":{}}}],["62",{"_index":813,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":805,"title":{},"body":{"coverage.html":{}}}],["7.8.1",{"_index":867,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":971,"title":{},"body":{"overview.html":{}}}],["8.0.1",{"_index":869,"title":{},"body":{"dependencies.html":{}}}],["8.7.0",{"_index":855,"title":{},"body":{"dependencies.html":{}}}],["9.0.0",{"_index":826,"title":{},"body":{"dependencies.html":{}}}],["9.4.3",{"_index":830,"title":{},"body":{"dependencies.html":{}}}],["_doc",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{}}}],["_id",{"_index":461,"title":{},"body":{"injectables/GroupService.html":{},"injectables/HipsService.html":{},"interfaces/JwtPayload.html":{},"classes/User.html":{}}}],["access",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"guards/PermissionsGuard.html":{}}}],["alias",{"_index":816,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":978,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allexceptionsfilter",{"_index":1,"title":{"classes/AllExceptionsFilter.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["allow",{"_index":599,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PermissionsGuard.html":{}}}],["amazing",{"_index":951,"title":{},"body":{"index.html":{}}}],["any).code",{"_index":55,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["any).message",{"_index":52,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["api/hips",{"_index":497,"title":{},"body":{"controllers/HipsController.html":{}}}],["api/users",{"_index":781,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":73,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":65,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":924,"title":{},"body":{"index.html":{}}}],["applications",{"_index":881,"title":{},"body":{"index.html":{}}}],["apply",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtAuthGuard.html":{}}}],["appmodule",{"_index":78,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":72,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argumentshost",{"_index":15,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["array",{"_index":423,"title":{},"body":{"classes/Group.html":{},"classes/User.html":{}}}],["async",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GroupService.html":{},"controllers/GroupsController.html":{},"controllers/HipsController.html":{},"injectables/HipsService.html":{},"injectables/JwtStrategy.html":{},"guards/PermissionsGuard.html":{},"injectables/RedisService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["attach",{"_index":260,"title":{},"body":{"guards/AuthGuard.html":{}}}],["auth",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":274,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"controllers/GroupsController.html":{}}}],["auth.guard.ts",{"_index":581,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:12",{"_index":587,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:29",{"_index":589,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:7",{"_index":586,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.service",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["auth/auth.module",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/jwt",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"controllers/GroupsController.html":{}}}],["auth:${plainuser._id}:${jti",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth:${userid",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth:${userid}:${jti",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["auth:${userid}:${token",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["authcontroller",{"_index":139,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"guards/PermissionsGuard.html":{}}}],["authentication",{"_index":603,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["authguard",{"_index":221,"title":{"guards/AuthGuard.html":{}},"body":{"guards/AuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["authguard('jwt",{"_index":582,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authheader",{"_index":240,"title":{},"body":{"guards/AuthGuard.html":{}}}],["authheader.split",{"_index":247,"title":{},"body":{"guards/AuthGuard.html":{}}}],["authheader.startswith('bearer",{"_index":242,"title":{},"body":{"guards/AuthGuard.html":{}}}],["authmodule",{"_index":89,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":957,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":159,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":678,"title":{},"body":{"modules/RedisCustomModule.html":{}}}],["await",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/HipsService.html":{},"injectables/JwtStrategy.html":{},"guards/PermissionsGuard.html":{},"injectables/RedisService.html":{},"injectables/UserService.html":{}}}],["backers",{"_index":952,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["bcrypt.comparesync(password",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(createuserdto.password",{"_index":766,"title":{},"body":{"injectables/UserService.html":{}}}],["bcryptjs",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["board",{"_index":944,"title":{},"body":{"index.html":{}}}],["body",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GroupsController.html":{},"controllers/HipsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":653,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["bootstrap",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GroupsModule.html":{},"modules/HipsModule.html":{},"modules/RedisCustomModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":967,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":965,"title":{},"body":{"modules.html":{}}}],["building",{"_index":878,"title":{},"body":{"index.html":{}}}],["cache",{"_index":843,"title":{},"body":{"dependencies.html":{}}}],["calling",{"_index":773,"title":{},"body":{"injectables/UserService.html":{}}}],["canactivate",{"_index":224,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"guards/PermissionsGuard.html":{}}}],["canactivate(context",{"_index":229,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"guards/PermissionsGuard.html":{}}}],["catch",{"_index":12,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/RedisService.html":{}}}],["catch(exception",{"_index":13,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["chained",{"_index":775,"title":{},"body":{"injectables/UserService.html":{}}}],["channel",{"_index":915,"title":{},"body":{"index.html":{}}}],["check",{"_index":249,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/JwtStrategy.html":{},"index.html":{}}}],["checking",{"_index":601,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["class",{"_index":0,"title":{"classes/AllExceptionsFilter.html":{},"classes/CreateGroupDto.html":{},"classes/CreateHipDto.html":{},"classes/CreateUserDto.html":{},"classes/Group.html":{},"classes/Hip.html":{},"classes/LoginDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateHipDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateGroupDto.html":{},"classes/CreateHipDto.html":{},"classes/CreateUserDto.html":{},"classes/Group.html":{},"injectables/GroupService.html":{},"controllers/GroupsController.html":{},"modules/GroupsModule.html":{},"classes/Hip.html":{},"controllers/HipsController.html":{},"modules/HipsModule.html":{},"injectables/HipsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"guards/PermissionsGuard.html":{},"modules/RedisCustomModule.html":{},"injectables/RedisService.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateHipDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/CreateGroupDto.html":{},"classes/CreateHipDto.html":{},"classes/CreateUserDto.html":{},"classes/Group.html":{},"classes/Hip.html":{},"classes/LoginDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateHipDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"overview.html":{}}}],["client",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{}}}],["cluster_appmodule",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":263,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":266,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":265,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":264,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_groupsmodule",{"_index":480,"title":{},"body":{"modules/GroupsModule.html":{},"overview.html":{}}}],["cluster_groupsmodule_exports",{"_index":482,"title":{},"body":{"modules/GroupsModule.html":{},"overview.html":{}}}],["cluster_groupsmodule_imports",{"_index":481,"title":{},"body":{"modules/GroupsModule.html":{}}}],["cluster_groupsmodule_providers",{"_index":483,"title":{},"body":{"modules/GroupsModule.html":{},"overview.html":{}}}],["cluster_hipsmodule",{"_index":542,"title":{},"body":{"modules/HipsModule.html":{},"overview.html":{}}}],["cluster_hipsmodule_providers",{"_index":543,"title":{},"body":{"modules/HipsModule.html":{},"overview.html":{}}}],["cluster_rediscustommodule",{"_index":672,"title":{},"body":{"modules/RedisCustomModule.html":{},"overview.html":{}}}],["cluster_rediscustommodule_exports",{"_index":674,"title":{},"body":{"modules/RedisCustomModule.html":{},"overview.html":{}}}],["cluster_rediscustommodule_providers",{"_index":673,"title":{},"body":{"modules/RedisCustomModule.html":{}}}],["cluster_usersmodule",{"_index":794,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":795,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":796,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":40,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["come",{"_index":905,"title":{},"body":{"index.html":{}}}],["common/decorators/permissions.decorator",{"_index":523,"title":{},"body":{"controllers/HipsController.html":{},"controllers/UsersController.html":{}}}],["common/decorators/public.decorator",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{}}}],["common/guards/permissions.guard",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"controllers/GroupsController.html":{}}}],["common/redis/redis.module",{"_index":276,"title":{},"body":{"modules/AuthModule.html":{}}}],["common/redis/redis.service",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["compare",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{}}}],["compodoc/compodoc",{"_index":824,"title":{},"body":{"dependencies.html":{}}}],["config",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RedisCustomModule.html":{}}}],["configmodule",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RedisCustomModule.html":{}}}],["configmodule.forroot",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisCustomModule.html":{}}}],["configservice",{"_index":273,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('jwt_expires_in",{"_index":289,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('jwt_secret",{"_index":284,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configuration",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisCustomModule.html":{}}}],["connection",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["console.error('failed",{"_index":372,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(`token",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{}}}],["const",{"_index":34,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/Group.html":{},"injectables/GroupService.html":{},"classes/Hip.html":{},"injectables/HipsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PermissionsGuard.html":{},"injectables/RedisService.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":225,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/HipsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PermissionsGuard.html":{},"injectables/RedisService.html":{},"injectables/UserService.html":{}}}],["constructor(@injectmodel(group.name",{"_index":452,"title":{},"body":{"injectables/GroupService.html":{}}}],["constructor(@injectredis",{"_index":707,"title":{},"body":{"injectables/RedisService.html":{}}}],["constructor(configservice",{"_index":612,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(groupmodel",{"_index":433,"title":{},"body":{"injectables/GroupService.html":{}}}],["constructor(hipsmodel",{"_index":553,"title":{},"body":{"injectables/HipsService.html":{}}}],["constructor(private",{"_index":74,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/GroupsController.html":{},"controllers/HipsController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/UsersController.html":{}}}],["constructor(redis",{"_index":684,"title":{},"body":{"injectables/RedisService.html":{}}}],["constructor(redisservice",{"_index":226,"title":{},"body":{"guards/AuthGuard.html":{}}}],["constructor(reflector",{"_index":584,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PermissionsGuard.html":{}}}],["constructor(usermodel",{"_index":752,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["context",{"_index":232,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"guards/PermissionsGuard.html":{}}}],["context.getclass",{"_index":596,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":595,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PermissionsGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":239,"title":{},"body":{"guards/AuthGuard.html":{},"guards/PermissionsGuard.html":{}}}],["controller",{"_index":64,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/GroupsController.html":{},"controllers/HipsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/GroupsController.html":{},"controllers/HipsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('api/hips",{"_index":524,"title":{},"body":{"controllers/HipsController.html":{}}}],["controller('api/users",{"_index":788,"title":{},"body":{"controllers/UsersController.html":{}}}],["controller('auth",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('groups",{"_index":474,"title":{},"body":{"controllers/GroupsController.html":{}}}],["controllers",{"_index":66,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/GroupsController.html":{},"modules/GroupsModule.html":{},"controllers/HipsController.html":{},"modules/HipsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["convert",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{}}}],["cookie",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["cookies",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{}}}],["courses",{"_index":922,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":800,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":430,"title":{},"body":{"injectables/GroupService.html":{},"controllers/GroupsController.html":{},"classes/UpdateHipDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["create(@body",{"_index":476,"title":{},"body":{"controllers/GroupsController.html":{},"controllers/UsersController.html":{}}}],["create(creategroupdto",{"_index":437,"title":{},"body":{"injectables/GroupService.html":{},"controllers/GroupsController.html":{}}}],["create(createuserdto",{"_index":755,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["createdhip",{"_index":567,"title":{},"body":{"injectables/HipsService.html":{}}}],["createdhip.save",{"_index":569,"title":{},"body":{"injectables/HipsService.html":{}}}],["creategroupdto",{"_index":374,"title":{"classes/CreateGroupDto.html":{}},"body":{"classes/CreateGroupDto.html":{},"injectables/GroupService.html":{},"controllers/GroupsController.html":{},"coverage.html":{}}}],["createhip",{"_index":498,"title":{},"body":{"controllers/HipsController.html":{}}}],["createhip(@body",{"_index":526,"title":{},"body":{"controllers/HipsController.html":{}}}],["createhip(createhipdto",{"_index":503,"title":{},"body":{"controllers/HipsController.html":{}}}],["createhipdto",{"_index":381,"title":{"classes/CreateHipDto.html":{}},"body":{"classes/CreateHipDto.html":{},"controllers/HipsController.html":{},"injectables/HipsService.html":{},"classes/UpdateHipDto.html":{},"coverage.html":{}}}],["createuserdto",{"_index":395,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["credentials",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{}}}],["cross",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{}}}],["crypto",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{}}}],["crypto.randomuuid",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{}}}],["ctx",{"_index":35,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["ctx.getresponse",{"_index":37,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["customrequest",{"_index":152,"title":{"interfaces/CustomRequest.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/CustomRequest.html":{},"coverage.html":{}}}],["customrequest,@res",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{}}}],["datas.delete",{"_index":425,"title":{},"body":{"classes/Group.html":{}}}],["date(0",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{}}}],["declarations",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GroupsModule.html":{},"modules/HipsModule.html":{},"modules/RedisCustomModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decode",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{}}}],["decodedtoken",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{}}}],["decodedtoken.jti",{"_index":363,"title":{},"body":{"injectables/AuthService.html":{}}}],["decodedtoken.sub",{"_index":362,"title":{},"body":{"injectables/AuthService.html":{}}}],["decorators",{"_index":69,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateHipDto.html":{},"classes/Group.html":{},"controllers/GroupsController.html":{},"classes/Hip.html":{},"controllers/HipsController.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":917,"title":{},"body":{"index.html":{}}}],["default",{"_index":602,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/RedisService.html":{},"miscellaneous/variables.html":{}}}],["define",{"_index":743,"title":{},"body":{"classes/User.html":{}}}],["defined",{"_index":16,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreateGroupDto.html":{},"classes/CreateHipDto.html":{},"classes/CreateUserDto.html":{},"classes/Group.html":{},"injectables/GroupService.html":{},"controllers/GroupsController.html":{},"classes/Hip.html":{},"controllers/HipsController.html":{},"injectables/HipsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"guards/PermissionsGuard.html":{},"injectables/RedisService.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["del",{"_index":681,"title":{},"body":{"injectables/RedisService.html":{}}}],["del(key",{"_index":686,"title":{},"body":{"injectables/RedisService.html":{}}}],["delbypattern",{"_index":682,"title":{},"body":{"injectables/RedisService.html":{}}}],["delbypattern(pattern",{"_index":688,"title":{},"body":{"injectables/RedisService.html":{}}}],["delete",{"_index":471,"title":{},"body":{"controllers/GroupsController.html":{},"controllers/HipsController.html":{},"injectables/RedisService.html":{}}}],["delete('/:id",{"_index":539,"title":{},"body":{"controllers/HipsController.html":{}}}],["deleted",{"_index":715,"title":{},"body":{"injectables/RedisService.html":{}}}],["deletedhip",{"_index":577,"title":{},"body":{"injectables/HipsService.html":{}}}],["deletehip",{"_index":499,"title":{},"body":{"controllers/HipsController.html":{},"injectables/HipsService.html":{}}}],["deletehip(@param('id",{"_index":540,"title":{},"body":{"controllers/HipsController.html":{}}}],["deletehip(id",{"_index":506,"title":{},"body":{"controllers/HipsController.html":{},"injectables/HipsService.html":{}}}],["deletemanyhip",{"_index":551,"title":{},"body":{"injectables/HipsService.html":{}}}],["deletemanyhip(ids",{"_index":557,"title":{},"body":{"injectables/HipsService.html":{}}}],["dependencies",{"_index":80,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GroupsModule.html":{},"modules/HipsModule.html":{},"modules/RedisCustomModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["depending",{"_index":409,"title":{},"body":{"interfaces/CustomRequest.html":{}}}],["description",{"_index":882,"title":{},"body":{"index.html":{},"properties.html":{}}}],["determine",{"_index":38,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["development",{"_index":891,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":928,"title":{},"body":{"index.html":{}}}],["discord",{"_index":914,"title":{},"body":{"index.html":{}}}],["dive",{"_index":916,"title":{},"body":{"index.html":{}}}],["document",{"_index":421,"title":{},"body":{"classes/Group.html":{},"classes/Hip.html":{},"classes/User.html":{}}}],["documentation",{"_index":801,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dotenv",{"_index":850,"title":{},"body":{"dependencies.html":{}}}],["dto",{"_index":519,"title":{},"body":{"controllers/HipsController.html":{},"injectables/HipsService.html":{},"classes/UpdateHipDto.html":{}}}],["dto.ts",{"_index":384,"title":{},"body":{"classes/CreateHipDto.html":{},"classes/UpdateHipDto.html":{},"coverage.html":{}}}],["dto.ts:10",{"_index":389,"title":{},"body":{"classes/CreateHipDto.html":{}}}],["dto.ts:14",{"_index":391,"title":{},"body":{"classes/CreateHipDto.html":{}}}],["dto.ts:6",{"_index":390,"title":{},"body":{"classes/CreateHipDto.html":{}}}],["dto/create",{"_index":449,"title":{},"body":{"injectables/GroupService.html":{},"controllers/GroupsController.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["dto/login.dto",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/update",{"_index":451,"title":{},"body":{"injectables/GroupService.html":{},"controllers/GroupsController.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["dtos/create",{"_index":518,"title":{},"body":{"controllers/HipsController.html":{},"injectables/HipsService.html":{}}}],["dtos/update",{"_index":520,"title":{},"body":{"controllers/HipsController.html":{},"injectables/HipsService.html":{}}}],["duplicate",{"_index":47,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["e2e",{"_index":900,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":879,"title":{},"body":{"index.html":{}}}],["ensure",{"_index":629,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["enterprise",{"_index":933,"title":{},"body":{"index.html":{}}}],["env",{"_index":279,"title":{},"body":{"modules/AuthModule.html":{}}}],["err",{"_index":590,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["error",{"_index":49,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/RedisService.html":{}}}],["error('invalid",{"_index":364,"title":{},"body":{"injectables/AuthService.html":{}}}],["error.message",{"_index":373,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RedisService.html":{}}}],["ex",{"_index":709,"title":{},"body":{"injectables/RedisService.html":{}}}],["example",{"_index":887,"title":{},"body":{"index.html":{}}}],["exception",{"_index":23,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.getstatus",{"_index":43,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptionfilter",{"_index":9,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptions.filter.ts",{"_index":7,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["exceptions.filter.ts:12",{"_index":17,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exec",{"_index":462,"title":{},"body":{"injectables/GroupService.html":{},"injectables/HipsService.html":{},"injectables/UserService.html":{}}}],["executioncontext",{"_index":230,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"guards/PermissionsGuard.html":{}}}],["exists",{"_index":635,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["experience",{"_index":919,"title":{},"body":{"index.html":{}}}],["expiration",{"_index":291,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RedisService.html":{}}}],["expire",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{}}}],["expired",{"_index":639,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["expires",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{}}}],["expiresin",{"_index":288,"title":{},"body":{"modules/AuthModule.html":{}}}],["expiry",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{}}}],["explicitly",{"_index":742,"title":{},"body":{"classes/User.html":{}}}],["export",{"_index":32,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateGroupDto.html":{},"classes/CreateHipDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"classes/Group.html":{},"injectables/GroupService.html":{},"controllers/GroupsController.html":{},"modules/GroupsModule.html":{},"classes/Hip.html":{},"controllers/HipsController.html":{},"modules/HipsModule.html":{},"injectables/HipsService.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"guards/PermissionsGuard.html":{},"modules/RedisCustomModule.html":{},"injectables/RedisService.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateHipDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["exports",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GroupsModule.html":{},"modules/HipsModule.html":{},"modules/RedisCustomModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":31,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"interfaces/CustomRequest.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["extends",{"_index":406,"title":{},"body":{"interfaces/CustomRequest.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/UpdateHipDto.html":{},"classes/User.html":{}}}],["extract",{"_index":624,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt",{"_index":617,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":622,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromextractors([(request",{"_index":623,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["failed",{"_index":262,"title":{},"body":{"guards/AuthGuard.html":{}}}],["false",{"_index":627,"title":{},"body":{"injectables/JwtStrategy.html":{},"guards/PermissionsGuard.html":{}}}],["fetch",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{},"guards/PermissionsGuard.html":{}}}],["few",{"_index":903,"title":{},"body":{"index.html":{}}}],["field",{"_index":744,"title":{},"body":{"classes/User.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateGroupDto.html":{},"classes/CreateHipDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"classes/Group.html":{},"injectables/GroupService.html":{},"controllers/GroupsController.html":{},"modules/GroupsModule.html":{},"classes/Hip.html":{},"controllers/HipsController.html":{},"modules/HipsModule.html":{},"injectables/HipsService.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"guards/PermissionsGuard.html":{},"modules/RedisCustomModule.html":{},"injectables/RedisService.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateHipDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["find",{"_index":456,"title":{},"body":{"injectables/GroupService.html":{}}}],["findbyid",{"_index":750,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid(id",{"_index":757,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyids",{"_index":431,"title":{},"body":{"injectables/GroupService.html":{}}}],["findbyids(groupids",{"_index":439,"title":{},"body":{"injectables/GroupService.html":{}}}],["findbyusername",{"_index":751,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyusername(username",{"_index":759,"title":{},"body":{"injectables/UserService.html":{}}}],["follow",{"_index":937,"title":{},"body":{"index.html":{}}}],["forbiddenexception",{"_index":666,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["found",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{},"injectables/HipsService.html":{},"guards/PermissionsGuard.html":{}}}],["framework",{"_index":877,"title":{},"body":{"index.html":{}}}],["full",{"_index":932,"title":{},"body":{"index.html":{}}}],["function",{"_index":820,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":871,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{}}}],["get('/:id",{"_index":531,"title":{},"body":{"controllers/HipsController.html":{}}}],["get(key",{"_index":692,"title":{},"body":{"injectables/RedisService.html":{}}}],["gethello",{"_index":68,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["gethip",{"_index":500,"title":{},"body":{"controllers/HipsController.html":{},"injectables/HipsService.html":{}}}],["gethip(@param('id",{"_index":532,"title":{},"body":{"controllers/HipsController.html":{}}}],["gethip(id",{"_index":509,"title":{},"body":{"controllers/HipsController.html":{},"injectables/HipsService.html":{}}}],["gethips",{"_index":501,"title":{},"body":{"controllers/HipsController.html":{},"injectables/HipsService.html":{}}}],["getting",{"_index":873,"title":{"index.html":{}},"body":{}}],["globally",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisCustomModule.html":{}}}],["graph",{"_index":925,"title":{},"body":{"index.html":{}}}],["group",{"_index":410,"title":{"classes/Group.html":{}},"body":{"classes/Group.html":{},"modules/GroupsModule.html":{},"guards/PermissionsGuard.html":{},"classes/User.html":{},"coverage.html":{}}}],["group,groupdocument",{"_index":447,"title":{},"body":{"injectables/GroupService.html":{}}}],["group.dto",{"_index":450,"title":{},"body":{"injectables/GroupService.html":{},"controllers/GroupsController.html":{}}}],["group.dto.ts",{"_index":376,"title":{},"body":{"classes/CreateGroupDto.html":{},"classes/UpdateGroupDto.html":{},"coverage.html":{}}}],["group.dto.ts:2",{"_index":379,"title":{},"body":{"classes/CreateGroupDto.html":{},"classes/UpdateGroupDto.html":{}}}],["group.dto.ts:3",{"_index":380,"title":{},"body":{"classes/CreateGroupDto.html":{},"classes/UpdateGroupDto.html":{}}}],["group.name",{"_index":487,"title":{},"body":{"modules/GroupsModule.html":{}}}],["group.permissions",{"_index":668,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["groupdocument",{"_index":422,"title":{},"body":{"classes/Group.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["groupids",{"_index":398,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GroupService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["groupmodel",{"_index":436,"title":{},"body":{"injectables/GroupService.html":{}}}],["groups",{"_index":458,"title":{},"body":{"injectables/GroupService.html":{},"controllers/GroupsController.html":{},"guards/PermissionsGuard.html":{}}}],["groups.controller",{"_index":485,"title":{},"body":{"modules/GroupsModule.html":{}}}],["groups.service",{"_index":472,"title":{},"body":{"controllers/GroupsController.html":{},"modules/GroupsModule.html":{}}}],["groups/groups.module",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["groups/groups.service",{"_index":655,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["groups/schemas/group.schema",{"_index":736,"title":{},"body":{"classes/User.html":{}}}],["groupschema",{"_index":426,"title":{},"body":{"classes/Group.html":{},"modules/GroupsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["groupscontroller",{"_index":464,"title":{"controllers/GroupsController.html":{}},"body":{"controllers/GroupsController.html":{},"modules/GroupsModule.html":{},"coverage.html":{}}}],["groupservice",{"_index":428,"title":{"injectables/GroupService.html":{}},"body":{"injectables/GroupService.html":{},"controllers/GroupsController.html":{},"modules/GroupsModule.html":{},"guards/PermissionsGuard.html":{},"coverage.html":{},"overview.html":{}}}],["groupsmodule",{"_index":90,"title":{"modules/GroupsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GroupsModule.html":{},"modules.html":{},"overview.html":{}}}],["groupsservice",{"_index":647,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["grow",{"_index":948,"title":{},"body":{"index.html":{}}}],["guard",{"_index":220,"title":{"guards/AuthGuard.html":{},"guards/PermissionsGuard.html":{}},"body":{"coverage.html":{}}}],["guards",{"_index":222,"title":{},"body":{"guards/AuthGuard.html":{},"guards/PermissionsGuard.html":{},"overview.html":{}}}],["hadi",{"_index":975,"title":{},"body":{"properties.html":{}}}],["handle",{"_index":45,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{}}}],["handlerequest",{"_index":583,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["handlerequest(err",{"_index":588,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["handling",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{}}}],["hands",{"_index":918,"title":{},"body":{"index.html":{}}}],["handy",{"_index":906,"title":{},"body":{"index.html":{}}}],["hashedpassword",{"_index":765,"title":{},"body":{"injectables/UserService.html":{}}}],["haspermission",{"_index":646,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["haspermission(groups",{"_index":650,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["hello",{"_index":137,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":930,"title":{},"body":{"index.html":{}}}],["here",{"_index":745,"title":{},"body":{"classes/User.html":{},"index.html":{}}}],["hip",{"_index":383,"title":{"classes/Hip.html":{}},"body":{"classes/CreateHipDto.html":{},"classes/Hip.html":{},"controllers/HipsController.html":{},"modules/HipsModule.html":{},"injectables/HipsService.html":{},"classes/UpdateHipDto.html":{},"coverage.html":{}}}],["hipcode",{"_index":385,"title":{},"body":{"classes/CreateHipDto.html":{},"classes/Hip.html":{}}}],["hipdocument",{"_index":492,"title":{},"body":{"classes/Hip.html":{},"injectables/HipsService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["hipname",{"_index":386,"title":{},"body":{"classes/CreateHipDto.html":{},"classes/Hip.html":{}}}],["hips",{"_index":571,"title":{},"body":{"injectables/HipsService.html":{}}}],["hips.controller",{"_index":545,"title":{},"body":{"modules/HipsModule.html":{}}}],["hips.service",{"_index":522,"title":{},"body":{"controllers/HipsController.html":{},"modules/HipsModule.html":{}}}],["hips/hips.module",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["hips/schema/hip.schema",{"_index":565,"title":{},"body":{"injectables/HipsService.html":{}}}],["hipschema",{"_index":493,"title":{},"body":{"classes/Hip.html":{},"modules/HipsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["hipscontroller",{"_index":495,"title":{"controllers/HipsController.html":{}},"body":{"controllers/HipsController.html":{},"modules/HipsModule.html":{},"coverage.html":{}}}],["hipsmodel",{"_index":555,"title":{},"body":{"injectables/HipsService.html":{}}}],["hipsmodule",{"_index":91,"title":{"modules/HipsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HipsModule.html":{},"modules.html":{},"overview.html":{}}}],["hipsservice",{"_index":521,"title":{"injectables/HipsService.html":{}},"body":{"controllers/HipsController.html":{},"modules/HipsModule.html":{},"injectables/HipsService.html":{},"coverage.html":{},"overview.html":{}}}],["hojjati",{"_index":976,"title":{},"body":{"properties.html":{}}}],["host",{"_index":14,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["host.switchtohttp",{"_index":36,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["hour",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{}}}],["http",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(200",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception",{"_index":27,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httponly",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{}}}],["https",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://nestjs.com",{"_index":961,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":28,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpstatus.conflict",{"_index":59,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpstatus.internal_server_error",{"_index":44,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["id",{"_index":387,"title":{},"body":{"classes/CreateHipDto.html":{},"injectables/GroupService.html":{},"controllers/GroupsController.html":{},"classes/Hip.html":{},"controllers/HipsController.html":{},"injectables/HipsService.html":{},"interfaces/JwtPayload.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["identifier",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["ids",{"_index":459,"title":{},"body":{"injectables/GroupService.html":{},"injectables/HipsService.html":{}}}],["if(status===401",{"_index":60,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["ignoreexpiration",{"_index":626,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["immediately",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{}}}],["implements",{"_index":8,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"guards/AuthGuard.html":{},"guards/PermissionsGuard.html":{}}}],["import",{"_index":26,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateHipDto.html":{},"interfaces/CustomRequest.html":{},"classes/Group.html":{},"injectables/GroupService.html":{},"controllers/GroupsController.html":{},"modules/GroupsModule.html":{},"classes/Hip.html":{},"controllers/HipsController.html":{},"modules/HipsModule.html":{},"injectables/HipsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PermissionsGuard.html":{},"modules/RedisCustomModule.html":{},"injectables/RedisService.html":{},"classes/UpdateHipDto.html":{},"classes/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["imports",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GroupsModule.html":{},"modules/HipsModule.html":{},"modules/RedisCustomModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreateGroupDto.html":{},"classes/CreateHipDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"classes/Group.html":{},"injectables/GroupService.html":{},"controllers/GroupsController.html":{},"classes/Hip.html":{},"controllers/HipsController.html":{},"injectables/HipsService.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"guards/PermissionsGuard.html":{},"injectables/RedisService.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateGroupDto.html":{},"classes/CreateHipDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"classes/Group.html":{},"injectables/GroupService.html":{},"controllers/GroupsController.html":{},"modules/GroupsModule.html":{},"classes/Hip.html":{},"controllers/HipsController.html":{},"modules/HipsModule.html":{},"injectables/HipsService.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"guards/PermissionsGuard.html":{},"modules/RedisCustomModule.html":{},"injectables/RedisService.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateHipDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["inject",{"_index":281,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["injectable",{"_index":133,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/HipsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/RedisService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/HipsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PermissionsGuard.html":{},"injectables/RedisService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":134,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/HipsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/RedisService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectmodel",{"_index":445,"title":{},"body":{"injectables/GroupService.html":{},"injectables/HipsService.html":{},"injectables/UserService.html":{}}}],["injectmodel('hip",{"_index":566,"title":{},"body":{"injectables/HipsService.html":{}}}],["injectmodel(user.name",{"_index":764,"title":{},"body":{"injectables/UserService.html":{}}}],["injectredis",{"_index":706,"title":{},"body":{"injectables/RedisService.html":{}}}],["inserthip",{"_index":552,"title":{},"body":{"injectables/HipsService.html":{}}}],["inserthip(payload",{"_index":561,"title":{},"body":{"injectables/HipsService.html":{}}}],["installcompile",{"_index":889,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":42,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["instead",{"_index":772,"title":{},"body":{"injectables/UserService.html":{}}}],["interact",{"_index":926,"title":{},"body":{"index.html":{}}}],["interface",{"_index":402,"title":{"interfaces/CustomRequest.html":{},"interfaces/JwtPayload.html":{}},"body":{"interfaces/CustomRequest.html":{},"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["interfaces",{"_index":403,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/JwtPayload.html":{},"overview.html":{}}}],["internal",{"_index":53,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["invalid",{"_index":638,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ioredis",{"_index":705,"title":{},"body":{"injectables/RedisService.html":{},"dependencies.html":{}}}],["is_public_key",{"_index":591,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isglobal",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisCustomModule.html":{}}}],["isnotempty",{"_index":392,"title":{},"body":{"classes/CreateHipDto.html":{}}}],["isnotempty()@isstring",{"_index":388,"title":{},"body":{"classes/CreateHipDto.html":{}}}],["ispublic",{"_index":593,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isstring",{"_index":393,"title":{},"body":{"classes/CreateHipDto.html":{}}}],["isvalid",{"_index":251,"title":{},"body":{"guards/AuthGuard.html":{}}}],["itself",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["javascript",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{}}}],["job",{"_index":941,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":943,"title":{},"body":{"index.html":{}}}],["join",{"_index":954,"title":{},"body":{"index.html":{}}}],["jti",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["jwt",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CustomRequest.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":275,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt_secret",{"_index":286,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":110,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"modules/AppModule.html":{},"controllers/GroupsController.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":621,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":270,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":277,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":606,"title":{"interfaces/JwtPayload.html":{}},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["jwtservice",{"_index":227,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["jwtstrategy",{"_index":268,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":958,"title":{},"body":{"index.html":{}}}],["key",{"_index":48,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/RedisService.html":{}}}],["keys",{"_index":690,"title":{},"body":{"injectables/RedisService.html":{}}}],["keys.join",{"_index":718,"title":{},"body":{"injectables/RedisService.html":{}}}],["keys.length",{"_index":720,"title":{},"body":{"injectables/RedisService.html":{}}}],["lacks",{"_index":671,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["lax",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{}}}],["learn",{"_index":909,"title":{},"body":{"index.html":{}}}],["legend",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GroupsModule.html":{},"modules/HipsModule.html":{},"modules/RedisCustomModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["liaoliaots/nestjs",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{},"modules/RedisCustomModule.html":{},"injectables/RedisService.html":{},"dependencies.html":{}}}],["license",{"_index":964,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":946,"title":{},"body":{"index.html":{}}}],["limiter",{"_index":857,"title":{},"body":{"dependencies.html":{}}}],["linkedin",{"_index":939,"title":{},"body":{"index.html":{}}}],["literal",{"_index":407,"title":{},"body":{"interfaces/CustomRequest.html":{}}}],["load",{"_index":278,"title":{},"body":{"modules/AuthModule.html":{}}}],["loaded",{"_index":630,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["local",{"_index":861,"title":{},"body":{"dependencies.html":{}}}],["logger",{"_index":680,"title":{},"body":{"injectables/RedisService.html":{}}}],["logger(redisservice.name",{"_index":704,"title":{},"body":{"injectables/RedisService.html":{}}}],["logic",{"_index":604,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["login",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(logindto",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logindto",{"_index":147,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logout",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logout(@req",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(req",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(token",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["looking",{"_index":940,"title":{},"body":{"index.html":{}}}],["loop",{"_index":935,"title":{},"body":{"index.html":{}}}],["makes",{"_index":677,"title":{},"body":{"modules/RedisCustomModule.html":{}}}],["malformed",{"_index":246,"title":{},"body":{"guards/AuthGuard.html":{}}}],["manager",{"_index":844,"title":{},"body":{"dependencies.html":{}}}],["mapped",{"_index":853,"title":{},"body":{"dependencies.html":{}}}],["marked",{"_index":598,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["matching",{"_index":63,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateGroupDto.html":{},"classes/CreateHipDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"classes/Group.html":{},"injectables/GroupService.html":{},"controllers/GroupsController.html":{},"modules/GroupsModule.html":{},"classes/Hip.html":{},"controllers/HipsController.html":{},"modules/HipsModule.html":{},"injectables/HipsService.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"guards/PermissionsGuard.html":{},"modules/RedisCustomModule.html":{},"injectables/RedisService.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateHipDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maxage",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{}}}],["message",{"_index":51,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{}}}],["metadata",{"_index":865,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":11,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/GroupService.html":{},"controllers/GroupsController.html":{},"controllers/HipsController.html":{},"injectables/HipsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PermissionsGuard.html":{},"injectables/RedisService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["mget",{"_index":683,"title":{},"body":{"injectables/RedisService.html":{}}}],["mget(keys",{"_index":695,"title":{},"body":{"injectables/RedisService.html":{}}}],["mines.add",{"_index":424,"title":{},"body":{"classes/Group.html":{}}}],["miscellaneous",{"_index":870,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":245,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/JwtAuthGuard.html":{}}}],["mit",{"_index":945,"title":{},"body":{"index.html":{}}}],["mode",{"_index":894,"title":{},"body":{"index.html":{}}}],["model",{"_index":434,"title":{},"body":{"injectables/GroupService.html":{},"injectables/HipsService.html":{},"injectables/UserService.html":{}}}],["module",{"_index":77,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GroupsModule.html":{},"modules/HipsModule.html":{},"modules/RedisCustomModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GroupsModule.html":{},"modules/HipsModule.html":{},"modules/RedisCustomModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":79,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GroupsModule.html":{},"modules/HipsModule.html":{},"modules/RedisCustomModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/ioredis",{"_index":828,"title":{},"body":{"dependencies.html":{}}}],["mongodb",{"_index":46,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"interfaces/JwtPayload.html":{}}}],["mongoose",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{},"classes/Group.html":{},"injectables/GroupService.html":{},"classes/Hip.html":{},"modules/HipsModule.html":{},"injectables/HipsService.html":{},"classes/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["mongoosemodule",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"modules/GroupsModule.html":{},"modules/HipsModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":486,"title":{},"body":{"modules/GroupsModule.html":{},"modules/HipsModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forroot(process.env.mongo_url",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["mongooseschema",{"_index":735,"title":{},"body":{"classes/User.html":{}}}],["mongooseschema.types.objectid",{"_index":738,"title":{},"body":{"classes/User.html":{}}}],["more",{"_index":910,"title":{},"body":{"index.html":{}}}],["multiple",{"_index":457,"title":{},"body":{"injectables/GroupService.html":{},"injectables/RedisService.html":{}}}],["myśliwiec",{"_index":959,"title":{},"body":{"index.html":{}}}],["name",{"_index":20,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreateGroupDto.html":{},"classes/Group.html":{},"injectables/GroupService.html":{},"controllers/GroupsController.html":{},"modules/GroupsModule.html":{},"controllers/HipsController.html":{},"modules/HipsModule.html":{},"injectables/HipsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PermissionsGuard.html":{},"injectables/RedisService.html":{},"classes/UpdateGroupDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["need",{"_index":929,"title":{},"body":{"index.html":{}}}],["nest",{"_index":883,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":963,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":827,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["nestjs/common",{"_index":29,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GroupService.html":{},"controllers/GroupsController.html":{},"modules/GroupsModule.html":{},"controllers/HipsController.html":{},"modules/HipsModule.html":{},"injectables/HipsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PermissionsGuard.html":{},"modules/RedisCustomModule.html":{},"injectables/RedisService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"modules/RedisCustomModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtAuthGuard.html":{},"guards/PermissionsGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":236,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":727,"title":{},"body":{"classes/UpdateHipDto.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"classes/Group.html":{},"injectables/GroupService.html":{},"modules/GroupsModule.html":{},"classes/Hip.html":{},"modules/HipsModule.html":{},"injectables/HipsService.html":{},"classes/User.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":272,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":836,"title":{},"body":{"dependencies.html":{}}}],["nestjs/serve",{"_index":837,"title":{},"body":{"dependencies.html":{}}}],["nestjs/throttler",{"_index":840,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/HipsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PermissionsGuard.html":{},"injectables/RedisService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["newgroup",{"_index":453,"title":{},"body":{"injectables/GroupService.html":{}}}],["newgroup.save",{"_index":455,"title":{},"body":{"injectables/GroupService.html":{}}}],["newuser",{"_index":768,"title":{},"body":{"injectables/UserService.html":{}}}],["newuser.save",{"_index":770,"title":{},"body":{"injectables/UserService.html":{}}}],["node.js",{"_index":876,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":564,"title":{},"body":{"injectables/HipsService.html":{}}}],["notfoundexception('hip",{"_index":576,"title":{},"body":{"injectables/HipsService.html":{}}}],["npm",{"_index":888,"title":{},"body":{"index.html":{}}}],["null",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["number",{"_index":700,"title":{},"body":{"injectables/RedisService.html":{}}}],["object",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{}}}],["objectid",{"_index":740,"title":{},"body":{"classes/User.html":{}}}],["observable",{"_index":656,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["offer",{"_index":942,"title":{},"body":{"index.html":{}}}],["official",{"_index":920,"title":{},"body":{"index.html":{}}}],["open",{"_index":947,"title":{},"body":{"index.html":{}}}],["optional",{"_index":22,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GroupService.html":{},"controllers/GroupsController.html":{},"controllers/HipsController.html":{},"injectables/HipsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PermissionsGuard.html":{},"injectables/RedisService.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["optionally",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{}}}],["out",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GroupsModule.html":{},"modules/HipsModule.html":{},"modules/RedisCustomModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":968,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":823,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pair",{"_index":702,"title":{},"body":{"injectables/RedisService.html":{}}}],["param",{"_index":470,"title":{},"body":{"controllers/GroupsController.html":{},"controllers/HipsController.html":{},"controllers/UsersController.html":{}}}],["param('id",{"_index":536,"title":{},"body":{"controllers/HipsController.html":{}}}],["parameters",{"_index":18,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/GroupService.html":{},"controllers/GroupsController.html":{},"controllers/HipsController.html":{},"injectables/HipsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PermissionsGuard.html":{},"injectables/RedisService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["parser",{"_index":848,"title":{},"body":{"dependencies.html":{}}}],["part",{"_index":931,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":726,"title":{},"body":{"classes/UpdateHipDto.html":{}}}],["partialtype(createhipdto",{"_index":725,"title":{},"body":{"classes/UpdateHipDto.html":{}}}],["passport",{"_index":619,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":271,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":616,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":610,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["pattern",{"_index":691,"title":{},"body":{"injectables/RedisService.html":{}}}],["payload",{"_index":257,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/CustomRequest.html":{},"injectables/HipsService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.interface",{"_index":620,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.interface.ts",{"_index":607,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["payload.sub",{"_index":640,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.username",{"_index":641,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["permission",{"_index":667,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["permission.includes('admin",{"_index":670,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["permissions",{"_index":378,"title":{},"body":{"classes/CreateGroupDto.html":{},"classes/Group.html":{},"controllers/HipsController.html":{},"guards/PermissionsGuard.html":{},"classes/UpdateGroupDto.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["permissions('hips.add",{"_index":525,"title":{},"body":{"controllers/HipsController.html":{}}}],["permissions('hips.add')@post",{"_index":504,"title":{},"body":{"controllers/HipsController.html":{}}}],["permissions('hips.delete",{"_index":538,"title":{},"body":{"controllers/HipsController.html":{}}}],["permissions('hips.delete')@delete('/:id",{"_index":507,"title":{},"body":{"controllers/HipsController.html":{}}}],["permissions('hips.find",{"_index":530,"title":{},"body":{"controllers/HipsController.html":{}}}],["permissions('hips.find')@get('/:id",{"_index":510,"title":{},"body":{"controllers/HipsController.html":{}}}],["permissions('hips.findall",{"_index":528,"title":{},"body":{"controllers/HipsController.html":{}}}],["permissions('hips.findall')@get",{"_index":512,"title":{},"body":{"controllers/HipsController.html":{}}}],["permissions('hips.update",{"_index":534,"title":{},"body":{"controllers/HipsController.html":{}}}],["permissions('hips.update')@put('/:id",{"_index":516,"title":{},"body":{"controllers/HipsController.html":{}}}],["permissions('users.add",{"_index":789,"title":{},"body":{"controllers/UsersController.html":{}}}],["permissions('users.add')@post",{"_index":782,"title":{},"body":{"controllers/UsersController.html":{}}}],["permissions('users.update",{"_index":791,"title":{},"body":{"controllers/UsersController.html":{}}}],["permissions('users.update')@post('/:id",{"_index":784,"title":{},"body":{"controllers/UsersController.html":{}}}],["permissions_key",{"_index":811,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["permissionsguard",{"_index":113,"title":{"guards/PermissionsGuard.html":{}},"body":{"modules/AppModule.html":{},"controllers/GroupsController.html":{},"guards/PermissionsGuard.html":{},"coverage.html":{}}}],["plain",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{}}}],["plainuser",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{}}}],["plainuser._id",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{}}}],["plainuser.username",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{}}}],["please",{"_index":913,"title":{},"body":{"index.html":{}}}],["policy",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{}}}],["populate",{"_index":776,"title":{},"body":{"injectables/UserService.html":{}}}],["populated",{"_index":660,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["populateduser",{"_index":661,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["post",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GroupsController.html":{},"controllers/HipsController.html":{},"controllers/UsersController.html":{}}}],["post('/:id",{"_index":792,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('login",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout')@httpcode(200",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GroupsController.html":{},"controllers/HipsController.html":{},"controllers/UsersController.html":{}}}],["prevent",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{}}}],["private",{"_index":237,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/HipsService.html":{},"injectables/JwtStrategy.html":{},"guards/PermissionsGuard.html":{},"injectables/RedisService.html":{},"injectables/UserService.html":{}}}],["process.env.node_env",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{}}}],["production",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["progressive",{"_index":875,"title":{},"body":{"index.html":{}}}],["project",{"_index":886,"title":{},"body":{"index.html":{}}}],["promise",{"_index":233,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/HipsService.html":{},"guards/PermissionsGuard.html":{},"injectables/RedisService.html":{},"injectables/UserService.html":{}}}],["prop",{"_index":418,"title":{},"body":{"classes/Group.html":{},"classes/Hip.html":{},"classes/User.html":{}}}],["prop({required",{"_index":412,"title":{},"body":{"classes/Group.html":{},"classes/User.html":{}}}],["prop({type",{"_index":414,"title":{},"body":{"classes/Group.html":{},"classes/User.html":{}}}],["properly",{"_index":631,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["properties",{"_index":377,"title":{"properties.html":{}},"body":{"classes/CreateGroupDto.html":{},"classes/CreateHipDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"classes/Group.html":{},"classes/Hip.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/RedisService.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"properties.html":{}}}],["property",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{}}}],["provide",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["provided",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{}}}],["providers",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GroupsModule.html":{},"modules/HipsModule.html":{},"modules/RedisCustomModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["public",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@post('login')@httpcode(200",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["put",{"_index":786,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('/:id",{"_index":535,"title":{},"body":{"controllers/HipsController.html":{}}}],["put(':id",{"_index":467,"title":{},"body":{"controllers/GroupsController.html":{}}}],["put,patch",{"_index":469,"title":{},"body":{"controllers/GroupsController.html":{},"controllers/HipsController.html":{}}}],["query",{"_index":774,"title":{},"body":{"injectables/UserService.html":{}}}],["questions",{"_index":911,"title":{},"body":{"index.html":{}}}],["rate",{"_index":856,"title":{},"body":{"dependencies.html":{}}}],["read",{"_index":955,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":75,"title":{},"body":{"controllers/AppController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/GroupsController.html":{},"controllers/HipsController.html":{},"injectables/HipsService.html":{},"injectables/JwtStrategy.html":{},"guards/PermissionsGuard.html":{},"injectables/RedisService.html":{},"controllers/UsersController.html":{}}}],["real",{"_index":927,"title":{},"body":{"index.html":{}}}],["redis",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"modules/RedisCustomModule.html":{},"injectables/RedisService.html":{},"dependencies.html":{}}}],["redis.service",{"_index":676,"title":{},"body":{"modules/RedisCustomModule.html":{}}}],["redis/redis.service",{"_index":235,"title":{},"body":{"guards/AuthGuard.html":{}}}],["redis://${process.env.redis_user}:${process.env.redis_password}@${process.env.redis_host}:${process.env.redis_port",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisCustomModule.html":{}}}],["redisclient",{"_index":611,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["rediscustommodule",{"_index":267,"title":{"modules/RedisCustomModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/RedisCustomModule.html":{},"modules.html":{},"overview.html":{}}}],["rediskey",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{}}}],["rediskeys",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{}}}],["redismodule",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisCustomModule.html":{}}}],["redismodule.forroot",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisCustomModule.html":{}}}],["redisservice",{"_index":93,"title":{"injectables/RedisService.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"modules/RedisCustomModule.html":{},"injectables/RedisService.html":{},"coverage.html":{},"overview.html":{}}}],["ref",{"_index":739,"title":{},"body":{"classes/User.html":{}}}],["references",{"_index":741,"title":{},"body":{"classes/User.html":{}}}],["reflect",{"_index":864,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":585,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PermissionsGuard.html":{}}}],["remove",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["removed",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{}}}],["repository",{"_index":885,"title":{},"body":{"index.html":{}}}],["represents",{"_index":608,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["req",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.cookies['authentication",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.user",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{}}}],["request",{"_index":238,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/CustomRequest.html":{},"injectables/JwtStrategy.html":{},"guards/PermissionsGuard.html":{}}}],["request.headers['authorization",{"_index":241,"title":{},"body":{"guards/AuthGuard.html":{}}}],["request.interface",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["request.interface.ts",{"_index":405,"title":{},"body":{"interfaces/CustomRequest.html":{},"coverage.html":{}}}],["request.user",{"_index":259,"title":{},"body":{"guards/AuthGuard.html":{},"guards/PermissionsGuard.html":{}}}],["request?.cookies?.authentication",{"_index":625,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["required",{"_index":416,"title":{},"body":{"classes/Group.html":{},"guards/PermissionsGuard.html":{},"classes/User.html":{}}}],["requiredpermissions",{"_index":651,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["requiredpermissions.includes(permission",{"_index":669,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["res",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.cookie('authentication",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.send",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.status(400).send",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.status(401).send",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["reset",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GroupsModule.html":{},"modules/HipsModule.html":{},"modules/RedisCustomModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":904,"title":{},"body":{"index.html":{}}}],["response",{"_index":30,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{}}}],["response.status(httpstatus.conflict).json",{"_index":57,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["response.status(status).json",{"_index":61,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["result",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{},"injectables/HipsService.html":{}}}],["result.id",{"_index":570,"title":{},"body":{"injectables/HipsService.html":{}}}],["results",{"_index":62,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateGroupDto.html":{},"classes/CreateHipDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"classes/Group.html":{},"injectables/GroupService.html":{},"controllers/GroupsController.html":{},"modules/GroupsModule.html":{},"classes/Hip.html":{},"controllers/HipsController.html":{},"modules/HipsModule.html":{},"injectables/HipsService.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"guards/PermissionsGuard.html":{},"modules/RedisCustomModule.html":{},"injectables/RedisService.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateHipDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":285,"title":{},"body":{"modules/AuthModule.html":{}}}],["retrieved",{"_index":713,"title":{},"body":{"injectables/RedisService.html":{}}}],["return",{"_index":41,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/GroupService.html":{},"controllers/GroupsController.html":{},"controllers/HipsController.html":{},"injectables/HipsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PermissionsGuard.html":{},"injectables/RedisService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["returns",{"_index":24,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/GroupService.html":{},"controllers/GroupsController.html":{},"controllers/HipsController.html":{},"injectables/HipsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PermissionsGuard.html":{},"injectables/RedisService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["route",{"_index":597,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["run",{"_index":890,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":657,"title":{},"body":{"guards/PermissionsGuard.html":{},"dependencies.html":{}}}],["same",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{}}}],["samesite",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{}}}],["scalable",{"_index":880,"title":{},"body":{"index.html":{}}}],["schema",{"_index":419,"title":{},"body":{"classes/Group.html":{},"modules/GroupsModule.html":{},"classes/Hip.html":{},"modules/HipsModule.html":{},"classes/User.html":{},"modules/UsersModule.html":{}}}],["schema/hip.schema",{"_index":546,"title":{},"body":{"modules/HipsModule.html":{}}}],["schemafactory",{"_index":420,"title":{},"body":{"classes/Group.html":{},"classes/Hip.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(group",{"_index":427,"title":{},"body":{"classes/Group.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(hip",{"_index":494,"title":{},"body":{"classes/Hip.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":748,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["schemas/group.schema",{"_index":448,"title":{},"body":{"injectables/GroupService.html":{},"modules/GroupsModule.html":{}}}],["schemas/user.schema",{"_index":762,"title":{},"body":{"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["seconds",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{}}}],["secret",{"_index":283,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":628,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secure",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{}}}],["server",{"_index":54,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"index.html":{}}}],["session",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{}}}],["set",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{},"injectables/RedisService.html":{}}}],["set(key",{"_index":698,"title":{},"body":{"injectables/RedisService.html":{}}}],["setmetadata(is_public_key",{"_index":984,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(permissions_key",{"_index":985,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setting",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{}}}],["setup",{"_index":549,"title":{},"body":{"modules/HipsModule.html":{},"index.html":{}}}],["side",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["signoptions",{"_index":287,"title":{},"body":{"modules/AuthModule.html":{}}}],["site",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateGroupDto.html":{},"classes/CreateHipDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"classes/Group.html":{},"injectables/GroupService.html":{},"controllers/GroupsController.html":{},"modules/GroupsModule.html":{},"classes/Hip.html":{},"controllers/HipsController.html":{},"modules/HipsModule.html":{},"injectables/HipsService.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"guards/PermissionsGuard.html":{},"modules/RedisCustomModule.html":{},"injectables/RedisService.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateHipDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["specific",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{},"guards/PermissionsGuard.html":{}}}],["specifically",{"_index":50,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["sponsors",{"_index":950,"title":{},"body":{"index.html":{}}}],["src/.../group.schema.ts",{"_index":979,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../hip.schema.ts",{"_index":980,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":872,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../permissions.decorator.ts",{"_index":983,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../public.decorator.ts",{"_index":982,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.schema.ts",{"_index":981,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":67,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":70,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":135,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":136,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:15",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:34",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":269,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:10",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:20",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:33",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:58",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:70",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":642,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts:2",{"_index":644,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:3",{"_index":643,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/jwt",{"_index":580,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":609,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:13",{"_index":613,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:38",{"_index":615,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/common/decorators/permissions.decorator.ts",{"_index":808,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/public.decorator.ts",{"_index":812,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/filters/all",{"_index":6,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["src/common/guards/auth.guard.ts",{"_index":223,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["src/common/guards/auth.guard.ts:12",{"_index":231,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/common/guards/auth.guard.ts:6",{"_index":228,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/common/guards/permissions.guard.ts",{"_index":645,"title":{},"body":{"guards/PermissionsGuard.html":{},"coverage.html":{}}}],["src/common/guards/permissions.guard.ts:15",{"_index":649,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["src/common/guards/permissions.guard.ts:44",{"_index":652,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["src/common/guards/permissions.guard.ts:8",{"_index":648,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["src/common/redis/redis.module.ts",{"_index":675,"title":{},"body":{"modules/RedisCustomModule.html":{}}}],["src/common/redis/redis.service.ts",{"_index":679,"title":{},"body":{"injectables/RedisService.html":{},"coverage.html":{}}}],["src/common/redis/redis.service.ts:14",{"_index":701,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/common/redis/redis.service.ts:31",{"_index":693,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/common/redis/redis.service.ts:45",{"_index":687,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/common/redis/redis.service.ts:58",{"_index":696,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/common/redis/redis.service.ts:7",{"_index":685,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/common/redis/redis.service.ts:72",{"_index":689,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/groups/dto/create",{"_index":375,"title":{},"body":{"classes/CreateGroupDto.html":{},"coverage.html":{}}}],["src/groups/dto/update",{"_index":723,"title":{},"body":{"classes/UpdateGroupDto.html":{},"coverage.html":{}}}],["src/groups/groups.controller.ts",{"_index":465,"title":{},"body":{"controllers/GroupsController.html":{},"coverage.html":{}}}],["src/groups/groups.controller.ts:15",{"_index":466,"title":{},"body":{"controllers/GroupsController.html":{}}}],["src/groups/groups.controller.ts:20",{"_index":468,"title":{},"body":{"controllers/GroupsController.html":{}}}],["src/groups/groups.module.ts",{"_index":484,"title":{},"body":{"modules/GroupsModule.html":{}}}],["src/groups/groups.service.ts",{"_index":429,"title":{},"body":{"injectables/GroupService.html":{},"coverage.html":{}}}],["src/groups/groups.service.ts:12",{"_index":438,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/groups/groups.service.ts:18",{"_index":441,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/groups/groups.service.ts:22",{"_index":444,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/groups/groups.service.ts:9",{"_index":435,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/groups/schemas/group.schema.ts",{"_index":411,"title":{},"body":{"classes/Group.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/groups/schemas/group.schema.ts:12",{"_index":417,"title":{},"body":{"classes/Group.html":{}}}],["src/groups/schemas/group.schema.ts:9",{"_index":413,"title":{},"body":{"classes/Group.html":{}}}],["src/hips/dtos/create",{"_index":382,"title":{},"body":{"classes/CreateHipDto.html":{},"coverage.html":{}}}],["src/hips/dtos/update",{"_index":724,"title":{},"body":{"classes/UpdateHipDto.html":{},"coverage.html":{}}}],["src/hips/hips.controller.ts",{"_index":496,"title":{},"body":{"controllers/HipsController.html":{},"coverage.html":{}}}],["src/hips/hips.controller.ts:13",{"_index":505,"title":{},"body":{"controllers/HipsController.html":{}}}],["src/hips/hips.controller.ts:19",{"_index":513,"title":{},"body":{"controllers/HipsController.html":{}}}],["src/hips/hips.controller.ts:26",{"_index":511,"title":{},"body":{"controllers/HipsController.html":{}}}],["src/hips/hips.controller.ts:33",{"_index":517,"title":{},"body":{"controllers/HipsController.html":{}}}],["src/hips/hips.controller.ts:43",{"_index":508,"title":{},"body":{"controllers/HipsController.html":{}}}],["src/hips/hips.module.ts",{"_index":544,"title":{},"body":{"modules/HipsModule.html":{}}}],["src/hips/hips.service.ts",{"_index":550,"title":{},"body":{"injectables/HipsService.html":{},"coverage.html":{}}}],["src/hips/hips.service.ts:14",{"_index":562,"title":{},"body":{"injectables/HipsService.html":{}}}],["src/hips/hips.service.ts:20",{"_index":560,"title":{},"body":{"injectables/HipsService.html":{}}}],["src/hips/hips.service.ts:25",{"_index":559,"title":{},"body":{"injectables/HipsService.html":{}}}],["src/hips/hips.service.ts:30",{"_index":563,"title":{},"body":{"injectables/HipsService.html":{}}}],["src/hips/hips.service.ts:42",{"_index":556,"title":{},"body":{"injectables/HipsService.html":{}}}],["src/hips/hips.service.ts:46",{"_index":558,"title":{},"body":{"injectables/HipsService.html":{}}}],["src/hips/hips.service.ts:9",{"_index":554,"title":{},"body":{"injectables/HipsService.html":{}}}],["src/hips/schema/hip.schema.ts",{"_index":488,"title":{},"body":{"classes/Hip.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/hips/schema/hip.schema.ts:12",{"_index":489,"title":{},"body":{"classes/Hip.html":{}}}],["src/hips/schema/hip.schema.ts:15",{"_index":491,"title":{},"body":{"classes/Hip.html":{}}}],["src/hips/schema/hip.schema.ts:9",{"_index":490,"title":{},"body":{"classes/Hip.html":{}}}],["src/main.ts",{"_index":819,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/types/express",{"_index":404,"title":{},"body":{"interfaces/CustomRequest.html":{},"coverage.html":{}}}],["src/users/dto/create",{"_index":396,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":729,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/schemas/user.schema.ts",{"_index":730,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/users/schemas/user.schema.ts:10",{"_index":734,"title":{},"body":{"classes/User.html":{}}}],["src/users/schemas/user.schema.ts:13",{"_index":733,"title":{},"body":{"classes/User.html":{}}}],["src/users/schemas/user.schema.ts:17",{"_index":732,"title":{},"body":{"classes/User.html":{}}}],["src/users/schemas/user.schema.ts:19",{"_index":731,"title":{},"body":{"classes/User.html":{}}}],["src/users/users.controller.ts",{"_index":780,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:13",{"_index":783,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:19",{"_index":785,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":797,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":749,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:10",{"_index":753,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/users.service.ts:15",{"_index":756,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/users.service.ts:21",{"_index":760,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/users.service.ts:26",{"_index":758,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/users.service.ts:31",{"_index":761,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":892,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":895,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":896,"title":{},"body":{"index.html":{}}}],["started",{"_index":874,"title":{"index.html":{}},"body":{}}],["starter",{"_index":884,"title":{},"body":{"index.html":{}}}],["statements",{"_index":802,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":838,"title":{},"body":{"dependencies.html":{}}}],["status",{"_index":39,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["statuscode",{"_index":58,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["stay",{"_index":934,"title":{},"body":{"index.html":{}}}],["store",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["stored",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{}}}],["storedtoken",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["strategy",{"_index":618,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["strict",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{}}}],["string",{"_index":71,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreateGroupDto.html":{},"classes/CreateHipDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"classes/Group.html":{},"injectables/GroupService.html":{},"controllers/GroupsController.html":{},"classes/Hip.html":{},"controllers/HipsController.html":{},"injectables/HipsService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"guards/PermissionsGuard.html":{},"injectables/RedisService.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["structure",{"_index":255,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/CustomRequest.html":{}}}],["sub",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CustomRequest.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["super",{"_index":592,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["super.canactivate(context",{"_index":605,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":912,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":966,"title":{},"body":{"modules.html":{}}}],["table",{"_index":822,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":821,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":899,"title":{},"body":{"index.html":{}}}],["test:covresources",{"_index":902,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":901,"title":{},"body":{"index.html":{}}}],["tests",{"_index":897,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":949,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":76,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(logindto",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.logout(token",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.groupmodel(creategroupdto",{"_index":454,"title":{},"body":{"injectables/GroupService.html":{}}}],["this.groupmodel.find",{"_index":460,"title":{},"body":{"injectables/GroupService.html":{}}}],["this.groupmodel.findbyidandupdate(id",{"_index":463,"title":{},"body":{"injectables/GroupService.html":{}}}],["this.groupservice.create(creategroupdto",{"_index":477,"title":{},"body":{"controllers/GroupsController.html":{}}}],["this.groupservice.update(id",{"_index":479,"title":{},"body":{"controllers/GroupsController.html":{}}}],["this.groupsservice.findbyids(populateduser.groupids",{"_index":664,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["this.haspermission(usergroups",{"_index":665,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["this.hipsmodel(payload",{"_index":568,"title":{},"body":{"injectables/HipsService.html":{}}}],["this.hipsmodel.deletemany",{"_index":579,"title":{},"body":{"injectables/HipsService.html":{}}}],["this.hipsmodel.find",{"_index":572,"title":{},"body":{"injectables/HipsService.html":{}}}],["this.hipsmodel.findbyid(id",{"_index":573,"title":{},"body":{"injectables/HipsService.html":{}}}],["this.hipsmodel.findbyidanddelete(id",{"_index":578,"title":{},"body":{"injectables/HipsService.html":{}}}],["this.hipsmodel.findbyidandupdate(id",{"_index":575,"title":{},"body":{"injectables/HipsService.html":{}}}],["this.hipsservice.deletehip(id",{"_index":541,"title":{},"body":{"controllers/HipsController.html":{}}}],["this.hipsservice.gethip(id",{"_index":533,"title":{},"body":{"controllers/HipsController.html":{}}}],["this.hipsservice.gethips",{"_index":529,"title":{},"body":{"controllers/HipsController.html":{}}}],["this.hipsservice.inserthip(createhipdto",{"_index":527,"title":{},"body":{"controllers/HipsController.html":{}}}],["this.hipsservice.updatehip(id",{"_index":537,"title":{},"body":{"controllers/HipsController.html":{}}}],["this.jwtservice.decode(payload",{"_index":634,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.jwtservice.decode(token",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(payload",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(token",{"_index":258,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.logger.error(`failed",{"_index":711,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.logger.log(`key",{"_index":710,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.logger.log(`keys",{"_index":717,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.redis.del(...keys",{"_index":722,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.redis.del(key",{"_index":714,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.redis.get(key",{"_index":712,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.redis.keys(pattern",{"_index":719,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.redis.mget(...keys",{"_index":716,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.redis.set(key",{"_index":708,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.redisclient",{"_index":632,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.redisclient.get(tokenkey",{"_index":637,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.redisservice.del(key",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.redisservice.get(`auth:${userid}:${token",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.redisservice.get(`jwt:${token",{"_index":252,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.redisservice.get(rediskey",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.redisservice.getclient",{"_index":633,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.redisservice.set(rediskey",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.reflector.get",{"_index":658,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":594,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.usermodel",{"_index":769,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findbyid(id).populate('groupids').exec",{"_index":777,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findbyidandupdate(id",{"_index":778,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findone",{"_index":771,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.create(createuserdto",{"_index":790,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.findbyid(user.userid",{"_index":662,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["this.userservice.findbyusername(username",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.update(id",{"_index":793,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.validateuser(username",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":243,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/HipsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PermissionsGuard.html":{},"injectables/RedisService.html":{}}}],["time",{"_index":292,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["token",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["tokenkey",{"_index":636,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["touch",{"_index":956,"title":{},"body":{"index.html":{}}}],["true",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"classes/Group.html":{},"injectables/GroupService.html":{},"injectables/HipsService.html":{},"injectables/JwtAuthGuard.html":{},"guards/PermissionsGuard.html":{},"modules/RedisCustomModule.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":256,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/RedisService.html":{}}}],["ttl",{"_index":699,"title":{},"body":{"injectables/RedisService.html":{}}}],["twitter",{"_index":962,"title":{},"body":{"index.html":{}}}],["type",{"_index":21,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreateGroupDto.html":{},"classes/CreateHipDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"classes/Group.html":{},"injectables/GroupService.html":{},"controllers/GroupsController.html":{},"classes/Hip.html":{},"controllers/HipsController.html":{},"injectables/HipsService.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"guards/PermissionsGuard.html":{},"injectables/RedisService.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":977,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":446,"title":{},"body":{"injectables/GroupService.html":{},"classes/UpdateHipDto.html":{},"classes/User.html":{},"dependencies.html":{}}}],["types.objectid",{"_index":440,"title":{},"body":{"injectables/GroupService.html":{},"classes/User.html":{}}}],["types/express",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["typescript",{"_index":746,"title":{},"body":{"classes/User.html":{},"index.html":{}}}],["unauthorizedexception",{"_index":234,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["unauthorizedexception('invalid",{"_index":253,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{}}}],["unauthorizedexception('token",{"_index":244,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["unauthorizedexception('user",{"_index":659,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["unauthorizedexception,forbiddenexception",{"_index":654,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["undefined",{"_index":415,"title":{},"body":{"classes/Group.html":{},"classes/User.html":{}}}],["unique",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{}}}],["unit",{"_index":898,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":33,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"interfaces/CustomRequest.html":{},"controllers/GroupsController.html":{},"controllers/HipsController.html":{},"injectables/HipsService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{}}}],["unlicensed",{"_index":974,"title":{},"body":{"properties.html":{}}}],["update",{"_index":432,"title":{},"body":{"injectables/GroupService.html":{},"controllers/GroupsController.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["update(@param('id",{"_index":478,"title":{},"body":{"controllers/GroupsController.html":{},"controllers/UsersController.html":{}}}],["update(id",{"_index":442,"title":{},"body":{"injectables/GroupService.html":{},"controllers/GroupsController.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["updatedhip",{"_index":574,"title":{},"body":{"injectables/HipsService.html":{}}}],["updategroupdto",{"_index":443,"title":{"classes/UpdateGroupDto.html":{}},"body":{"injectables/GroupService.html":{},"controllers/GroupsController.html":{},"classes/UpdateGroupDto.html":{},"coverage.html":{}}}],["updatehip",{"_index":502,"title":{},"body":{"controllers/HipsController.html":{},"injectables/HipsService.html":{}}}],["updatehip(id",{"_index":514,"title":{},"body":{"controllers/HipsController.html":{},"injectables/HipsService.html":{}}}],["updatehipdto",{"_index":515,"title":{"classes/UpdateHipDto.html":{}},"body":{"controllers/HipsController.html":{},"injectables/HipsService.html":{},"classes/UpdateHipDto.html":{},"coverage.html":{}}}],["updates",{"_index":936,"title":{},"body":{"index.html":{}}}],["updateuserdto",{"_index":728,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["url",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisCustomModule.html":{}}}],["use",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/HipsModule.html":{}}}],["useclass",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["usefactory",{"_index":282,"title":{},"body":{"modules/AuthModule.html":{}}}],["useguards",{"_index":473,"title":{},"body":{"controllers/GroupsController.html":{}}}],["useguards(jwtauthguard",{"_index":475,"title":{},"body":{"controllers/GroupsController.html":{}}}],["user",{"_index":203,"title":{"classes/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/CustomRequest.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"guards/PermissionsGuard.html":{},"classes/User.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["user._doc",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.dto",{"_index":763,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["user.dto.ts",{"_index":397,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:2",{"_index":401,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:3",{"_index":400,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:4",{"_index":399,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.name",{"_index":799,"title":{},"body":{"modules/UsersModule.html":{}}}],["user.password",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.toobject",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdocument",{"_index":737,"title":{},"body":{"classes/User.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["usergroups",{"_index":663,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["userid",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CustomRequest.html":{},"injectables/JwtStrategy.html":{}}}],["userid(userid",{"_index":408,"title":{},"body":{"interfaces/CustomRequest.html":{}}}],["usermodel",{"_index":754,"title":{},"body":{"injectables/UserService.html":{}}}],["username",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["users.controller",{"_index":798,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":787,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/users.module",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GroupsModule.html":{}}}],["users/users.service",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{},"guards/PermissionsGuard.html":{}}}],["userschema",{"_index":747,"title":{},"body":{"classes/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":779,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":297,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"guards/PermissionsGuard.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["usersmodule",{"_index":92,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GroupsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["using",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["validate",{"_index":254,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":614,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatetoken",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatetoken(userid",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(username",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":394,"title":{},"body":{"classes/CreateHipDto.html":{},"dependencies.html":{}}}],["validity",{"_index":250,"title":{},"body":{"guards/AuthGuard.html":{}}}],["value",{"_index":694,"title":{},"body":{"injectables/RedisService.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":697,"title":{},"body":{"injectables/RedisService.html":{}}}],["variable",{"_index":809,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":280,"title":{"miscellaneous/variables.html":{}},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["verification",{"_index":261,"title":{},"body":{"guards/AuthGuard.html":{}}}],["verify",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{}}}],["version",{"_index":973,"title":{},"body":{"properties.html":{}}}],["video",{"_index":921,"title":{},"body":{"index.html":{}}}],["visit",{"_index":908,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":923,"title":{},"body":{"index.html":{}}}],["void",{"_index":25,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["wait",{"_index":868,"title":{},"body":{"dependencies.html":{}}}],["watch",{"_index":893,"title":{},"body":{"index.html":{}}}],["website",{"_index":960,"title":{},"body":{"index.html":{}}}],["without",{"_index":600,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/RedisService.html":{}}}],["working",{"_index":907,"title":{},"body":{"index.html":{}}}],["world",{"_index":138,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":938,"title":{},"body":{"index.html":{}}}],["yes",{"_index":703,"title":{},"body":{"injectables/RedisService.html":{}}}],["you'd",{"_index":953,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GroupsModule.html":{},"modules/HipsModule.html":{},"modules/RedisCustomModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AllExceptionsFilter.html":{"url":"classes/AllExceptionsFilter.html","title":"class - AllExceptionsFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllExceptionsFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/all-exceptions.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/all-exceptions.filter.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Response } from 'express';\n\n@Catch()\nexport class AllExceptionsFilter implements ExceptionFilter {\n  catch(exception: unknown, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n\n    // Determine the status code to return\n    const status =\n      exception instanceof HttpException\n        ? exception.getStatus()\n        : HttpStatus.INTERNAL_SERVER_ERROR;\n\n    // Handle MongoDB duplicate key error specifically\n    let message = (exception as any).message || 'Internal server error';\n    if ((exception as any).code === 11000) {\n      message = 'ورود داده های تکراری مجاز نیست!';\n      response.status(HttpStatus.CONFLICT).json({\n        statusCode: HttpStatus.CONFLICT,\n        message: message,\n      });\n    } else { \n\tif(status===401)\n\t{\n\t\t message = 'مجاز نیستید!';\n      response.status(status).json({\n        statusCode: status,\n        message: message,\n      });\n\t}\n\telse{\n      response.status(status).json({\n        statusCode: status,\n        message: message,\n      });\n\t}\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nGroupsModule\n\nGroupsModule\n\nAppModule -->\n\nGroupsModule->AppModule\n\n\n\n\n\nHipsModule\n\nHipsModule\n\nAppModule -->\n\nHipsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nRedisService\n\nRedisService\n\nAppModule -->\n\nRedisService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            RedisService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            GroupsModule\n                        \n                        \n                            HipsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { ConfigModule } from '@nestjs/config';\nimport { AppService } from './app.service';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UsersModule } from './users/users.module';\nimport { GroupsModule } from './groups/groups.module';\nimport { HipsModule } from './hips/hips.module';\nimport { AuthModule } from './auth/auth.module';\nimport { APP_GUARD } from '@nestjs/core';\nimport { JwtAuthGuard } from './auth/jwt-auth.guard';  \nimport { PermissionsGuard } from './common/guards/permissions.guard';\nimport { RedisModule } from '@liaoliaots/nestjs-redis'; \nimport { RedisService } from './common/redis/redis.service'; \n\n\n@Module({\n\timports: [\n\tConfigModule.forRoot({ isGlobal: true }), \n\tMongooseModule.forRoot(process.env.Mongo_URL), // MongoDB connection\n    UsersModule, \n\tGroupsModule,\n\tHipsModule,\n\tAuthModule,\n    RedisModule.forRoot({\n\t\tconfig: {\n\t\t\turl: `redis://${process.env.REDIS_USER}:${process.env.REDIS_PASSWORD}@${process.env.REDIS_HOST}:${process.env.REDIS_PORT}`,\n\n\t\t  },\n\n\t  }), // RedisModule configuration\n\t],\n  controllers: [AppController],\n  providers: [AppService, RedisService,\n\t{\n      provide: APP_GUARD,\n      useClass: JwtAuthGuard,  // Apply JwtAuthGuard globally\n    },  \n\t{\n\t provide: APP_GUARD,\n     useClass: PermissionsGuard, // Apply PermissionsGuard globally\n\t}\n],\n})\nexport class AppModule {}\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n \n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    Async\n                                logout\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('login')@HttpCode(200)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout(req: CustomRequest, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('logout')@HttpCode(200)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            CustomRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body, Res, Req, HttpCode } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\nimport { Response } from 'express';\nimport { Public } from '../common/decorators/public.decorator';\nimport { CustomRequest } from '../types/express-request.interface';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Public()\n  @Post('login')\n  @HttpCode(200)\n  async login(@Body() loginDto: LoginDto, @Res() res: Response) {\n\n    // Get the token from the AuthService\n    const token = await this.authService.login(loginDto);\n\n    // Set the token as an HTTP-only cookie\n    res.cookie('Authentication', token, {\n      httpOnly: true,            // Prevent client-side access\n      secure: process.env.NODE_ENV === 'production', // Use HTTPS in production\n      sameSite: 'strict',        // Strict or Lax (for cross-site cookie handling)\n      maxAge: 1000 * 60 * 60,    // Cookie expiry \n    });\n\n    // You can optionally return some response (but not the token itself)\n    return res.send({ message: 'با موفقیت وارد شدید' });\n  }\n\n  @Post('logout')\n  @HttpCode(200)\n  async logout(@Req() req: CustomRequest,@Res() res: Response) {\n    const user = req.user;\n    if (!user) {\n      return res.status(401).send({ message: 'User not authenticated' });\n    }\n    const token = req.cookies['Authentication'];\n\n  if (!token) {\n    return res.status(400).send({ message: 'No token found in cookies' });\n  }\n    await this.authService.logout(token);\n    res.cookie('Authentication', '', {\n      httpOnly: true,     // Prevent access from JavaScript\n      expires: new Date(0), // Expire the cookie immediately\n      sameSite: 'strict',    // Use the same site policy\n      secure: process.env.NODE_ENV === 'production', // Use HTTPS in production\n    }); \n    return res.send({ message: 'شما خارج شدید.' });\n  }\n}\n\n  \n  \n  \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/common/guards/auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(redisService: RedisService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/common/guards/auth.guard.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        redisService\n                                                  \n                                                        \n                                                                        RedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/guards/auth.guard.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext, UnauthorizedException } from '@nestjs/common';\nimport { RedisService } from '../redis/redis.service';\nimport { JwtService } from '@nestjs/jwt';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private readonly redisService: RedisService,\n    private readonly jwtService: JwtService,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const request = context.switchToHttp().getRequest();\n    const authHeader = request.headers['authorization'];\n\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      throw new UnauthorizedException('Token missing or malformed');\n    }\n\n    const token = authHeader.split(' ')[1];\n\n    // Check token validity in Redis\n    const isValid = await this.redisService.get(`jwt:${token}`);\n    if (!isValid) {\n      throw new UnauthorizedException('Invalid token');\n    }\n\n    // Validate token structure\n    try {\n      const payload = this.jwtService.verify(token);\n      request.user = payload; // Attach payload to request\n    } catch {\n      throw new UnauthorizedException('Token verification failed');\n    }\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nRedisCustomModule\n\nRedisCustomModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nRedisCustomModule->AuthModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RedisCustomModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { ConfigModule, ConfigService } from '@nestjs/config'; \nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { UsersModule } from '../users/users.module';\nimport { JwtStrategy } from './jwt.strategy';\nimport { RedisCustomModule } from '../common/redis/redis.module';\n\n@Module({\n  imports: [\n    ConfigModule, \n    UsersModule,\n    PassportModule,\n    RedisCustomModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule], // Use ConfigModule to load env variables\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => ({\n        secret: configService.get('JWT_SECRET'), // Retrieve JWT_SECRET from .env\n        signOptions: { expiresIn: configService.get('JWT_EXPIRES_IN') || '60m' }, // Optional expiration time config\n      }),\n    }),\n  ],\n  providers: [AuthService, JwtStrategy],\n  controllers: [AuthController],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                validateToken\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtService: JwtService, redisService: RedisService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        redisService\n                                                  \n                                                        \n                                                                        RedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:33\n                        \n                    \n\n\n            \n                \n                        Handle user login and store the token in Redis\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:70\n                        \n                    \n\n\n            \n                \n                        Handle user logout and remove token from Redis\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateToken(userId: string, token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:58\n                        \n                    \n\n\n            \n                \n                        Validate JWT token using Redis\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(username: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:20\n                        \n                    \n\n\n            \n                \n                        Validate user credentials (username and password)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { UserService } from '../users/users.service';\nimport { RedisService } from '../common/redis/redis.service'; \nimport * as bcrypt from 'bcryptjs';\nimport * as crypto from 'crypto';\nimport { LoginDto } from './dto/login.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly userService: UserService,\n    private readonly jwtService: JwtService,\n\tprivate readonly redisService: RedisService,\n  ) {}\n\n  /**\n   * Validate user credentials (username and password)\n   */\n  async validateUser(username: string, password: string): Promise {\n    const user = await this.userService.findByUsername(username);\n\n    if (user && bcrypt.compareSync(password, user.password)) {\n\t  const { password, ...result } = user;\n      return result;\n    }\n    return null;\n  }\n\n  /**\n   * Handle user login and store the token in Redis\n   */\n  async login(loginDto: LoginDto): Promise {\n    const { username, password } = loginDto;\n\n  // Use validateUser to fetch the user and verify credentials\n  const user = await this.validateUser(username, password);\n  if (!user) {\n    throw new UnauthorizedException('اطلاعات کاربری نادرست است!');\n  }\n  \n  // Use the `_doc` property or convert the Mongoose object to a plain object\n  const plainUser = user.toObject ? user.toObject() : user._doc;\n\n  // Generate JWT token\n  const jti = crypto.randomUUID(); // Generate a unique identifier for the token\n  const payload = { username: plainUser.username, sub: plainUser._id ,jti: jti};\n  const token = this.jwtService.sign(payload);\n\n  // Store the token in Redis with a 1-hour expiration\n  const redisKey = `auth:${plainUser._id}:${jti}`;\n  await this.redisService.set(redisKey, token, 3600); // 3600 seconds = 1 hour\n  return token; // Return token for setting in the cookie\n\t}\n  /**\n   * Validate JWT token using Redis\n   */\n  async validateToken(userId: string, token: string): Promise {\n   // const redisKey = `auth:${userId}`;\n   const redisKeys = await this.redisService.get(`auth:${userId}:${token}`);\n  //  const storedToken = await this.redisService.get(redisKey);\n\n    // Compare the provided token with the stored token in Redis\n    return redisKeys === token;\n  }\n\n  /**\n   * Handle user logout and remove token from Redis\n   */\n  async logout(token: string): Promise {\n    try {\n      // Decode the token to get the userId\n      const decodedToken = this.jwtService.decode(token) as { sub: string; jti: string };\n  \n      if (!decodedToken || !decodedToken.sub || !decodedToken.jti) {\n        throw new Error('Invalid token');\n      }\n  \n      const userId = decodedToken.sub;\n      const jti = decodedToken.jti;\n      // Remove the specific token\n      //const key = `auth:${userId}:${token}`;\n      const key = `auth:${userId}:${jti}`;\n      await this.redisService.del(key);\n  \n      console.log(`Token removed from Redis for session: ${key}`);\n    } catch (error) {\n      console.error('Failed to remove token from Redis:', error.message);\n      throw new UnauthorizedException('Invalid token');\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateGroupDto.html":{"url":"classes/CreateGroupDto.html","title":"class - CreateGroupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateGroupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/groups/dto/create-group.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                permissions\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/groups/dto/create-group.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/groups/dto/create-group.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateGroupDto {\n  name: string;\n  permissions: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateHipDto.html":{"url":"classes/CreateHipDto.html","title":"class - CreateHipDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateHipDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hips/dtos/create-hip-dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                hipCode\n                            \n                            \n                                    \n                                    \n                                hipName\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        hipCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/hips/dtos/create-hip-dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        hipName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/hips/dtos/create-hip-dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/hips/dtos/create-hip-dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreateHipDto {\n    @IsNotEmpty()\n    @IsString()\n    hipName: string;\n\t\n    @IsNotEmpty()\n    @IsString()\n    hipCode: string;\n\t\n\t@IsNotEmpty()\n    @IsString()\n    id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                groupIds\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        groupIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateUserDto {\n  username: string;\n  password: string;\n  groupIds: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CustomRequest.html":{"url":"interfaces/CustomRequest.html","title":"interface - CustomRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CustomRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/express-request.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\n\nexport interface CustomRequest extends Request {\n  user: {\n    userId(userId: any): unknown;\n    username: string;\n    sub: string; // or userId, depending on your JWT payload structure\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Group.html":{"url":"classes/Group.html","title":"class - Group","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Group\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/groups/schemas/group.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                permissions\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/groups/schemas/group.schema.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/groups/schemas/group.schema.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type GroupDocument = Group & Document;\n\n@Schema()\nexport class Group {\n  @Prop({ required: true })\n  name: string;\n\n  @Prop({ type: [String], required: true })\n  permissions: string[];  // Array of permissions like 'mines.add', 'datas.delete'\n}\n\nexport const GroupSchema = SchemaFactory.createForClass(Group);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GroupService.html":{"url":"injectables/GroupService.html","title":"injectable - GroupService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GroupService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/groups/groups.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findByIds\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(groupModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/groups/groups.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        groupModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createGroupDto: CreateGroupDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/groups/groups.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createGroupDto\n                                            \n                                                            CreateGroupDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByIds\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByIds(groupIds: Types.ObjectId[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/groups/groups.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                groupIds\n                                            \n                                                        Types.ObjectId[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateGroupDto: UpdateGroupDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/groups/groups.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateGroupDto\n                                            \n                                                            UpdateGroupDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, Types } from 'mongoose';\nimport { Group,GroupDocument  } from './schemas/group.schema';\nimport { CreateGroupDto } from './dto/create-group.dto';\nimport { UpdateGroupDto } from './dto/update-group.dto';\n\n@Injectable()\nexport class GroupService {\n  constructor(@InjectModel(Group.name) private groupModel: Model) {}\n\n  async create(createGroupDto: CreateGroupDto): Promise {\n    const newGroup = new this.groupModel(createGroupDto);\n    return newGroup.save();\n  }\n\n  // Find multiple groups by their IDs\n  async findByIds(groupIds: Types.ObjectId[]): Promise {\n    return this.groupModel.find({ _id: { $in: groupIds } }).exec();\n  }\n  \n  async update(id: string, updateGroupDto: UpdateGroupDto): Promise {\n    return this.groupModel.findByIdAndUpdate(id, updateGroupDto, { new: true }).exec();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GroupsController.html":{"url":"controllers/GroupsController.html","title":"controller - GroupsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GroupsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/groups/groups.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                groups\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createGroupDto: CreateGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/groups/groups.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createGroupDto\n                                            \n                                                            CreateGroupDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateGroupDto: UpdateGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/groups/groups.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateGroupDto\n                                            \n                                                            UpdateGroupDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body, Put,Patch, Param ,Get ,Delete} from '@nestjs/common';\nimport { GroupService } from './groups.service';\nimport { CreateGroupDto } from './dto/create-group.dto';\nimport { UpdateGroupDto } from './dto/update-group.dto';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { PermissionsGuard } from '../common/guards/permissions.guard';\nimport { UseGuards } from '@nestjs/common';\n\n@Controller('groups')\n@UseGuards(JwtAuthGuard, PermissionsGuard)\nexport class GroupsController {\n  constructor(private readonly groupService: GroupService) {}\n\n  @Post()\n  async create(@Body() createGroupDto: CreateGroupDto) {\n    return this.groupService.create(createGroupDto);\n  }\n\n  @Put(':id')\n  async update(@Param('id') id: string, @Body() updateGroupDto: UpdateGroupDto) {\n    return this.groupService.update(id, updateGroupDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GroupsModule.html":{"url":"modules/GroupsModule.html","title":"module - GroupsModule","body":"\n                   \n\n\n\n\n    Modules\n    GroupsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GroupsModule\n\n\n\ncluster_GroupsModule_imports\n\n\n\ncluster_GroupsModule_exports\n\n\n\ncluster_GroupsModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nGroupsModule\n\nGroupsModule\n\nGroupsModule -->\n\nUsersModule->GroupsModule\n\n\n\n\n\nGroupService \n\nGroupService \n\nGroupService  -->\n\nGroupsModule->GroupService \n\n\n\n\n\nGroupService\n\nGroupService\n\nGroupsModule -->\n\nGroupService->GroupsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/groups/groups.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GroupService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GroupsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            GroupService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { GroupService } from './groups.service';\nimport { GroupsController } from './groups.controller';\nimport { Group, GroupSchema } from './schemas/group.schema';\nimport { UsersModule } from '../users/users.module';\n@Module({\n  imports: [MongooseModule.forFeature([{ name: Group.name, schema: GroupSchema }]),\n  UsersModule\n  \n  ],\n  controllers: [GroupsController],\n  providers: [GroupService],\n  exports: [GroupService],\n})\nexport class GroupsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Hip.html":{"url":"classes/Hip.html","title":"class - Hip","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Hip\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hips/schema/hip.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                hipCode\n                            \n                            \n                                    \n                                hipName\n                            \n                            \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        hipCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/hips/schema/hip.schema.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        hipName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/hips/schema/hip.schema.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/hips/schema/hip.schema.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type HipDocument = Hip & Document;\n\n@Schema()\nexport class Hip {\n    @Prop()\n    hipName: string;\n\n    @Prop()\n    hipCode: string;\n\t\n\t@Prop()\n    id: string;\n}\nexport const HipSchema = SchemaFactory.createForClass(Hip);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HipsController.html":{"url":"controllers/HipsController.html","title":"controller - HipsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HipsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hips/hips.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api/hips\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                createHip\n                            \n                            \n                                    \n                                    \n                                    Async\n                                deleteHip\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getHip\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getHips\n                            \n                            \n                                    \n                                    \n                                    Async\n                                updateHip\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        createHip\n                        \n                    \n                \n            \n            \n                \n                        \n                    createHip(createHipDto: CreateHipDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Permissions('hips.add')@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/hips/hips.controller.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createHipDto\n                                            \n                                                            CreateHipDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        deleteHip\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteHip(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Permissions('hips.Delete')@Delete('/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/hips/hips.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getHip\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHip(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Permissions('hips.Find')@Get('/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/hips/hips.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getHips\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHips()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Permissions('hips.FindAll')@Get()\n                \n            \n\n                    \n                        \n                            Defined in src/hips/hips.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        updateHip\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateHip(id: string, updateHipDto: UpdateHipDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Permissions('hips.update')@Put('/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/hips/hips.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateHipDto\n                                            \n                                                            UpdateHipDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body, Put,Patch, Param ,Get ,Delete} from '@nestjs/common';\nimport { CreateHipDto } from './dtos/create-hip-dto';\nimport { UpdateHipDto } from './dtos/update-hip-dto';\nimport { HipsService } from './hips.service';\nimport { Permissions } from '../common/decorators/permissions.decorator';\n\n@Controller('api/hips')\nexport class HipsController { \n    constructor(private readonly hipsService: HipsService) {}\n\t\n\t@Permissions('hips.add')\n    @Post()\n    async createHip(@Body() createHipDto: CreateHipDto) {\n        return this.hipsService.insertHip(createHipDto);\n    }\n\t\n\t@Permissions('hips.FindAll')\n    @Get()\n    async getHips() {\n        return this.hipsService.getHips();\n    }\n\n\n\t@Permissions('hips.Find')\n    @Get('/:id')\n    async getHip(@Param('id') id: string) {\n        return this.hipsService.getHip(id);\n    }\n\n\n\t@Permissions('hips.update')\n    @Put('/:id')\n    async updateHip(\n        @Param('id') id: string,\n        @Body() updateHipDto: UpdateHipDto,\n    ) {\n        return this.hipsService.updateHip(id, updateHipDto);\n    }\n\n\n\t@Permissions('hips.Delete')\n    @Delete('/:id')\n    async deleteHip(@Param('id') id: string) {\n        return this.hipsService.deleteHip(id);\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HipsModule.html":{"url":"modules/HipsModule.html","title":"module - HipsModule","body":"\n                   \n\n\n\n\n    Modules\n    HipsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_HipsModule\n\n\n\ncluster_HipsModule_providers\n\n\n\n\nHipsService\n\nHipsService\n\n\n\nHipsModule\n\nHipsModule\n\nHipsModule -->\n\nHipsService->HipsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hips/hips.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HipsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            HipsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HipsService } from './hips.service';\nimport { HipsController } from './hips.controller';\nimport { MongooseModule } from '@nestjs/mongoose'; // 1. Import mongoose module\nimport { HipSchema } from './schema/hip.schema'; // 2. Import hip schema\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: 'Hip', schema: HipSchema }]), // 3. Setup the mongoose module to use the Hip schema\n  ],\n  controllers: [HipsController],\n  providers: [HipsService],\n})\nexport class HipsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HipsService.html":{"url":"injectables/HipsService.html","title":"injectable - HipsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HipsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hips/hips.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteHip\n                            \n                            \n                                    Async\n                                deleteManyHip\n                            \n                            \n                                    Async\n                                getHip\n                            \n                            \n                                    Async\n                                getHips\n                            \n                            \n                                    Async\n                                insertHip\n                            \n                            \n                                    Async\n                                updateHip\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(hipsModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/hips/hips.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        hipsModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteHip\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteHip(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/hips/hips.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteManyHip\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteManyHip(ids: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/hips/hips.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                ids\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getHip\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHip(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/hips/hips.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getHips\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHips()\n                \n            \n\n\n                    \n                        \n                            Defined in src/hips/hips.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        insertHip\n                        \n                    \n                \n            \n            \n                \n                        \n                    insertHip(payload: CreateHipDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/hips/hips.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            CreateHipDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateHip\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateHip(id: string, payload: UpdateHipDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/hips/hips.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                            UpdateHipDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreateHipDto } from './dtos/create-hip-dto';\nimport { UpdateHipDto } from './dtos/update-hip-dto';\nimport { Hip, HipDocument } from '../hips/schema/hip.schema';\n\n@Injectable()\nexport class HipsService {\n    constructor(\n        @InjectModel('Hip') private readonly hipsModel: Model,\n    ) {}\n\n    async insertHip(payload: CreateHipDto) {\n        const createdHip = new this.hipsModel(payload);\n        const result = await createdHip.save();\n        return result.id;\n    }\n\n    async getHips() {\n        const hips = await this.hipsModel.find();\n        return hips;\n    }\n\n    async getHip(id: string) {\n        const hip = await this.hipsModel.findById(id);\n        return hip;\n    }\n\n    async updateHip(id: string, payload: UpdateHipDto) {\n        const updatedHip = await this.hipsModel.findByIdAndUpdate(id, payload, {\n            new: true,\n        });\n\n        if (!updatedHip) {\n            throw new NotFoundException('Hip not found');\n        }\n\n        return updatedHip;\n    }\n\n    async deleteHip(id: string) {\n        const deletedHip = await this.hipsModel.findByIdAndDelete(id);\n        return deletedHip;\n    }\n    async deleteManyHip(ids: string[]): Promise {\n        await this.hipsModel.deleteMany({ _id: { $in: ids } }).exec();\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt-auth.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt-auth.guard.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err, user, info)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt-auth.guard.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                err\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                info\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ExecutionContext, UnauthorizedException } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { IS_PUBLIC_KEY } from '../common/decorators/public.decorator';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    // If the route is marked as public, allow access without checking JWT\n    if (isPublic) {\n\n      return true;\n    }\n\n    // If the route is not public, apply the default JWT authentication logic\n    return super.canActivate(context);\n  }\n\n  handleRequest(err, user, info) {\n    // If an error or no user, throw UnauthorizedException\n\n\n    if (err || !user) {\n      throw err || new UnauthorizedException('Invalid or missing token');\n    }\n\n    return user; // Return the authenticated user\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-payload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            sub\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n  username: string;\n  sub: string;  // This represents the user ID (_id in MongoDB)\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                redisClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, authService: AuthService, redisService: RedisService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        redisService\n                                                  \n                                                        \n                                                                        RedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        redisClient\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/auth/jwt.strategy.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { AuthService } from './auth.service';\nimport { JwtPayload } from './jwt-payload.interface';\nimport { Request } from 'express';\nimport { RedisService } from '@liaoliaots/nestjs-redis';\nimport { JwtService } from '@nestjs/jwt';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  private redisClient;\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly authService: AuthService,\n    private readonly redisService: RedisService, // Inject RedisService\n    private readonly jwtService: JwtService // Inject JwtService\n  ) \n  {\n    super({\n     // jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n\t\tjwtFromRequest: ExtractJwt.fromExtractors([(request: Request) => {\n        // Extract JWT from the Authentication cookie\n        const token = request?.cookies?.Authentication;\n        if (!token) {\n          return null;\n        }\n        return token;\n      }]),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_SECRET'),  // Ensure this is loaded properly\n    });\n       // Get Redis client from RedisService\n       this.redisClient = this.redisService.getClient();\n  }\n\n  async validate(payload: any) {\n    const { sub: userId , jti} = payload;\n    const token = this.jwtService.decode(payload) as string;\n\n    // Check if the token exists in Redis\n   // const key = `auth:${userId}:${token}`;\n    const tokenKey = `auth:${userId}:${jti}`;\n    const storedToken = await this.redisClient.get(tokenKey);\n\n    if (!storedToken) {\n      throw new UnauthorizedException('Token is invalid or expired');\n    }\n  \n    return { userId: payload.sub, username: payload.username };\n  }\n  \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class LoginDto {\n  username: string;\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/PermissionsGuard.html":{"url":"guards/PermissionsGuard.html","title":"guard - PermissionsGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    PermissionsGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/common/guards/permissions.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                hasPermission\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, userService: UserService, groupsService: GroupService)\n                    \n                \n                        \n                            \n                                Defined in src/common/guards/permissions.guard.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        groupsService\n                                                  \n                                                        \n                                                                        GroupService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/guards/permissions.guard.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasPermission\n                        \n                    \n                \n            \n            \n                \nhasPermission(groups, requiredPermissions: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/guards/permissions.guard.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                groups\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requiredPermissions\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable ,UnauthorizedException,ForbiddenException} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { UserService } from '../../users/users.service'; // Import UserService\nimport { GroupService } from '../../groups/groups.service'; // Import GroupsService\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class PermissionsGuard implements CanActivate {\n  constructor(\n    private reflector: Reflector,\n    private readonly userService: UserService,\n    private readonly groupsService: GroupService\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const requiredPermissions = this.reflector.get(\n      'permissions',\n      context.getHandler()\n    );\n    if (!requiredPermissions) {\n      return true; // No specific permissions required, allow access\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const user = request.user;\n    if (!user) {\n      throw new UnauthorizedException('User is not authenticated');\n    }\n\n    // Fetch the user with populated groups\n    const populatedUser = await this.userService.findById(user.userId);\n    if (!populatedUser) {\n      throw new UnauthorizedException('User not found');\n    }\n\n    const userGroups = await this.groupsService.findByIds(populatedUser.groupIds);\n    if (!this.hasPermission(userGroups, requiredPermissions)) {\n      throw new ForbiddenException('دسترسی ندارید!');\n    }\n\n    return true;\n  }\n\n  hasPermission(groups, requiredPermissions: string[]): boolean {\n    for (const group of groups) {\n      for (const permission of group.permissions) {\n       // if (requiredPermissions.includes(permission)) {\n\n        if (requiredPermissions.includes(permission)|| permission.includes('admin')) {\n          return true; // User has the required permission\n        }\n      }\n    }\n    return false; // User lacks the required permission\n  }\n}\n\n\n\n\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RedisCustomModule.html":{"url":"modules/RedisCustomModule.html","title":"module - RedisCustomModule","body":"\n                   \n\n\n\n\n    Modules\n    RedisCustomModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RedisCustomModule\n\n\n\ncluster_RedisCustomModule_providers\n\n\n\ncluster_RedisCustomModule_exports\n\n\n\n\nRedisService \n\nRedisService \n\n\n\nRedisCustomModule\n\nRedisCustomModule\n\nRedisService  -->\n\nRedisCustomModule->RedisService \n\n\n\n\n\nRedisService\n\nRedisService\n\nRedisCustomModule -->\n\nRedisService->RedisCustomModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/redis/redis.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RedisService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RedisService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RedisModule } from '@liaoliaots/nestjs-redis';\nimport { RedisService } from './redis.service';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n        isGlobal: true, // Makes configuration globally available\n      }),\n    RedisModule.forRoot({\n      config: {\n        url: `redis://${process.env.REDIS_USER}:${process.env.REDIS_PASSWORD}@${process.env.REDIS_HOST}:${process.env.REDIS_PORT}`,\n\n      },\n    }),\n  ],\n  providers: [RedisService],\n  exports: [RedisService], \n})\nexport class RedisCustomModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RedisService.html":{"url":"injectables/RedisService.html","title":"injectable - RedisService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RedisService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/redis/redis.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                del\n                            \n                            \n                                    Async\n                                delByPattern\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                mget\n                            \n                            \n                                    Async\n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(redis: Redis)\n                    \n                \n                        \n                            \n                                Defined in src/common/redis/redis.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        redis\n                                                  \n                                                        \n                                                                    Redis\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        del\n                        \n                    \n                \n            \n            \n                \n                        \n                    del(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/redis/redis.service.ts:45\n                        \n                    \n\n\n            \n                \n                        Delete a key from Redis\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delByPattern\n                        \n                    \n                \n            \n            \n                \n                        \n                    delByPattern(pattern: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/redis/redis.service.ts:72\n                        \n                    \n\n\n            \n                \n                        Delete multiple keys\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                pattern\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/redis/redis.service.ts:31\n                        \n                    \n\n\n            \n                \n                        Get a value by key from Redis\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        mget\n                        \n                    \n                \n            \n            \n                \n                        \n                    mget(keys: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/redis/redis.service.ts:58\n                        \n                    \n\n\n            \n                \n                        Get multiple values by keys\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                keys\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        set\n                        \n                    \n                \n            \n            \n                \n                        \n                    set(key: string, value: string, ttl?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/redis/redis.service.ts:14\n                        \n                    \n\n\n            \n                \n                        Set a key-value pair in Redis with optional TTL\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ttl\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(RedisService.name)\n                    \n                \n                    \n                        \n                                Defined in src/common/redis/redis.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { Redis } from 'ioredis';\nimport { InjectRedis } from '@liaoliaots/nestjs-redis';\n\n@Injectable()\nexport class RedisService {\n  private readonly logger = new Logger(RedisService.name);\n\n  constructor(@InjectRedis() private readonly redis: Redis) {}\n\n  /**\n   * Set a key-value pair in Redis with optional TTL\n   */\n  async set(key: string, value: string, ttl?: number): Promise {\n    try {\n      if (ttl) {\n        await this.redis.set(key, value, 'EX', ttl); // Set key with expiration\n      } else {\n        await this.redis.set(key, value); // Set key without expiration\n      }\n      this.logger.log(`Key set in Redis: ${key}`);\n    } catch (error) {\n      this.logger.error(`Failed to set key \"${key}\" in Redis: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Get a value by key from Redis\n   */\n  async get(key: string): Promise {\n    try {\n      const value = await this.redis.get(key);\n      this.logger.log(`Key retrieved from Redis: ${key}`);\n      return value;\n    } catch (error) {\n      this.logger.error(`Failed to get key \"${key}\" from Redis: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Delete a key from Redis\n   */\n  async del(key: string): Promise {\n    try {\n      await this.redis.del(key);\n      this.logger.log(`Key deleted from Redis: ${key}`);\n    } catch (error) {\n      this.logger.error(`Failed to delete key \"${key}\" from Redis: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Get multiple values by keys\n   */\n  async mget(keys: string[]): Promise {\n    try {\n      const values = await this.redis.mget(...keys);\n      this.logger.log(`Keys retrieved from Redis: ${keys.join(', ')}`);\n      return values;\n    } catch (error) {\n      this.logger.error(`Failed to get keys from Redis: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Delete multiple keys\n   */\n  async delByPattern(pattern: string): Promise {\n    try {\n      const keys = await this.redis.keys(pattern); // Get keys matching the pattern\n      if (keys.length > 0) {\n        await this.redis.del(...keys);\n        this.logger.log(`Keys deleted from Redis matching pattern: ${pattern}`);\n      }\n    } catch (error) {\n      this.logger.error(`Failed to delete keys by pattern \"${pattern}\": ${error.message}`);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateGroupDto.html":{"url":"classes/UpdateGroupDto.html","title":"class - UpdateGroupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateGroupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/groups/dto/update-group.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                permissions\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/groups/dto/update-group.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/groups/dto/update-group.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UpdateGroupDto {\n  name?: string;\n  permissions?: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateHipDto.html":{"url":"classes/UpdateHipDto.html","title":"class - UpdateHipDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateHipDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hips/dtos/update-hip-dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateHipDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateHipDto } from './create-hip-dto';\n\nexport class UpdateHipDto extends PartialType(CreateHipDto) {}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                groupIds\n                            \n                            \n                                    Optional\n                                password\n                            \n                            \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        groupIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UpdateUserDto {\n  username?: string;\n  password?: string;\n  groupIds?: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/schemas/user.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _id\n                            \n                            \n                                    \n                                groupIds\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        groupIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, Schema as MongooseSchema, Types } from 'mongoose';\nimport { Group } from '../../groups/schemas/group.schema';\n\nexport type UserDocument = User & Document;\n@Schema()\n//export class User extends Document {\n\texport class User {\n  @Prop({ required: true })\n  username: string;\n\n  @Prop({ required: true })\n  password: string;\n\n  //@Prop([{ type: MongooseSchema.Types.ObjectId, ref: 'Group' }])\n @Prop({ type: [{ type: Types.ObjectId, ref: 'Group' }] })\n  groupIds: Types.ObjectId[];  // Array of group ObjectId references\n  \n  _id: Types.ObjectId;  // Explicitly define _id field here for TypeScript\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findByUsername\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByUsername\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByUsername(username: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { User ,UserDocument} from './schemas/user.schema';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport * as bcrypt from 'bcryptjs';\n\n@Injectable()\nexport class UserService {\n  constructor(\n  @InjectModel(User.name) private userModel: Model\n  ) {}\n\n  async create(createUserDto: CreateUserDto): Promise {\n      const hashedPassword = await bcrypt.hash(createUserDto.password, 10);\n  const newUser = new this.userModel({ ...createUserDto, password: hashedPassword });\n  return newUser.save();\n  }\n\n  async findByUsername(username: string): Promise {\n\n    return this.userModel.findOne({ username }).exec();\n  }\n\n  async findById(id: string): Promise {\n    // Instead of calling .exec(), just return the query, so it can be chained with populate\n    return this.userModel.findById(id).populate('groupIds').exec(); \n  }\n\n  async update(id: string, updateUserDto: UpdateUserDto): Promise {\n    return this.userModel.findByIdAndUpdate(id, updateUserDto, { new: true }).exec();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api/users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Permissions('users.add')@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Permissions('users.update')@Post('/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body, Put, Param } from '@nestjs/common';\nimport { UserService } from './users.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { Permissions } from '../common/decorators/permissions.decorator';\n\n@Controller('api/users')\nexport class UsersController {\n  constructor(private readonly userService: UserService) {}\n\n  @Permissions('users.add')\n  @Post()\n  async create(@Body() createUserDto: CreateUserDto) {\n    return this.userService.create(createUserDto);\n  }\n\n  @Permissions('users.update')\n  @Post('/:id')\n  async update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n    return this.userService.update(id, updateUserDto);\n  }\n}\n \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUsersModule\n\nUsersModule\n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UserService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { User, UserSchema } from './schemas/user.schema';\n\n@Module({\n  imports: [MongooseModule.forFeature([{ name: User.name, schema: UserSchema }])],\n  controllers: [UsersController],\n  providers: [UserService],\n    exports: [UserService]\n})\nexport class UsersModule {}\n \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                66 %\n                (4/6)\n            \n        \n        \n            \n                \n                src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/jwt-payload.interface.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/common/decorators/permissions.decorator.ts\n            \n            variable\n            Permissions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/decorators/permissions.decorator.ts\n            \n            variable\n            PERMISSIONS_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/decorators/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/decorators/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/filters/all-exceptions.filter.ts\n            \n            class\n            AllExceptionsFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/guards/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/guards/permissions.guard.ts\n            \n            guard\n            PermissionsGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/redis/redis.service.ts\n            \n            injectable\n            RedisService\n            \n                62 %\n                (5/8)\n            \n        \n        \n            \n                \n                src/groups/dto/create-group.dto.ts\n            \n            class\n            CreateGroupDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/groups/dto/update-group.dto.ts\n            \n            class\n            UpdateGroupDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/groups/groups.controller.ts\n            \n            controller\n            GroupsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/groups/groups.service.ts\n            \n            injectable\n            GroupService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/groups/schemas/group.schema.ts\n            \n            class\n            Group\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/groups/schemas/group.schema.ts\n            \n            variable\n            GroupSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/groups/schemas/group.schema.ts\n            \n            type alias\n            GroupDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/hips/dtos/create-hip-dto.ts\n            \n            class\n            CreateHipDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/hips/dtos/update-hip-dto.ts\n            \n            class\n            UpdateHipDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/hips/hips.controller.ts\n            \n            controller\n            HipsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/hips/hips.service.ts\n            \n            injectable\n            HipsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/hips/schema/hip.schema.ts\n            \n            class\n            Hip\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/hips/schema/hip.schema.ts\n            \n            variable\n            HipSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/hips/schema/hip.schema.ts\n            \n            type alias\n            HipDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/types/express-request.interface.ts\n            \n            interface\n            CustomRequest\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/schemas/user.schema.ts\n            \n            class\n            User\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/users/schemas/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/users/schemas/user.schema.ts\n            \n            type alias\n            UserDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.26\n        \n            @liaoliaots/nestjs-redis : ^9.0.0\n        \n            @nestjs-modules/ioredis : ^2.0.2\n        \n            @nestjs/common : ^9.4.3\n        \n            @nestjs/config : ^3.2.3\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/mongoose : ^10.0.10\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/serve-static : ^4.0.2\n        \n            @nestjs/throttler : ^6.2.1\n        \n            bcryptjs : ^2.4.3\n        \n            cache-manager : ^4.0.0\n        \n            cache-manager-redis-store : ^2.0.0\n        \n            class-validator : ^0.14.1\n        \n            cookie-parser : ^1.4.7\n        \n            dotenv : ^16.4.5\n        \n            ioredis : ^5.4.1\n        \n            mapped-types : ^0.0.1\n        \n            mongoose : ^8.7.0\n        \n            nestjs-rate-limiter : ^3.1.0\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            redis : ^4.7.0\n        \n            reflect-metadata : ^0.1.12\n        \n            rxjs : ^7.8.1\n        \n            wait-on : ^8.0.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GroupsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HipsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RedisCustomModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_GroupsModule\n\n\n\ncluster_GroupsModule_exports\n\n\n\ncluster_GroupsModule_providers\n\n\n\ncluster_HipsModule\n\n\n\ncluster_HipsModule_providers\n\n\n\ncluster_RedisCustomModule\n\n\n\ncluster_RedisCustomModule_exports\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nGroupsModule\n\nGroupsModule\n\nAppModule -->\n\nGroupsModule->AppModule\n\n\n\n\n\nGroupService \n\nGroupService \n\nGroupService  -->\n\nGroupsModule->GroupService \n\n\n\n\n\nHipsModule\n\nHipsModule\n\nAppModule -->\n\nHipsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nGroupsModule -->\n\nUsersModule->GroupsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nRedisService\n\nRedisService\n\nAppModule -->\n\nRedisService->AppModule\n\n\n\n\n\nRedisCustomModule\n\nRedisCustomModule\n\nRedisCustomModule -->\n\nRedisService->RedisCustomModule\n\n\n\nAuthModule -->\n\nRedisCustomModule->AuthModule\n\n\n\n\n\nRedisService \n\nRedisService \n\nRedisService  -->\n\nRedisCustomModule->RedisService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nGroupService\n\nGroupService\n\nGroupsModule -->\n\nGroupService->GroupsModule\n\n\n\n\n\nHipsService\n\nHipsService\n\nHipsModule -->\n\nHipsService->HipsModule\n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    11 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : Hadi Hojjati\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GroupDocument   (src/.../group.schema.ts)\n                        \n                        \n                            HipDocument   (src/.../hip.schema.ts)\n                        \n                        \n                            UserDocument   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/groups/schemas/group.schema.ts\n    \n    \n        \n            \n                \n                    \n                    GroupDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/hips/schema/hip.schema.ts\n    \n    \n        \n            \n                \n                    \n                    HipDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/users/schemas/user.schema.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GroupSchema   (src/.../group.schema.ts)\n                        \n                        \n                            HipSchema   (src/.../hip.schema.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            Permissions   (src/.../permissions.decorator.ts)\n                        \n                        \n                            PERMISSIONS_KEY   (src/.../permissions.decorator.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/groups/schemas/group.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GroupSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Group)\n                    \n                \n\n\n        \n    \n\n    src/hips/schema/hip.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        HipSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Hip)\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/permissions.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Permissions\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...permissions: string[]) => SetMetadata(PERMISSIONS_KEY, permissions)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PERMISSIONS_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'permissions'\n                    \n                \n\n\n        \n    \n\n    src/users/schemas/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
